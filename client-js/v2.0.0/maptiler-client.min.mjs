import ve from"quick-lru";function Re(){return typeof self<"u"?fetch.bind(self):typeof global<"u"&&global.fetch?global.fetch:null}class X{constructor(){this._apiKey="",this._fetch=Re(),this.tileCacheSize=200}set apiKey(n){this._apiKey=n}get apiKey(){return this._apiKey}set fetch(n){this._fetch=n}get fetch(){return this._fetch}}const m=new X,I={AUTO:{code:null,flag:"auto",name:"Auto",latin:!1,isMode:!0,geocoding:!0},LATIN:{code:"latin",flag:"name:latin",name:"Latin",latin:!0,isMode:!1,geocoding:!1},NON_LATIN:{code:"nonlatin",flag:"name:nonlatin",name:"Non Latin",latin:!1,isMode:!1,geocoding:!1},LOCAL:{code:null,flag:"name",name:"Local",latin:!0,isMode:!1,geocoding:!1},AMHARIC:{code:"am",flag:"name:am",name:"Amharic",latin:!1,isMode:!1,geocoding:!1},ARABIC:{code:"ar",flag:"name:ar",name:"Arabic",latin:!1,isMode:!1,geocoding:!0},AZERBAIJANI:{code:"az",flag:"name:az",name:"Azerbaijani",latin:!0,isMode:!1,geocoding:!0},BELARUSIAN:{code:"be",flag:"name:be",name:"Belarusian",latin:!1,isMode:!1,geocoding:!0},BULGARIAN:{code:"bg",flag:"bg",name:"Bulgarian",latin:!1,isMode:!1,geocoding:!0},BENGALI:{code:"bn",flag:"name:bn",name:"Bengali",latin:!0,isMode:!1,geocoding:!1},BRETON:{code:"br",flag:"name:br",name:"Breton",latin:!0,isMode:!1,geocoding:!0},BOSNIAN:{code:"bs",flag:"name:bs",name:"Bosnian",latin:!0,isMode:!1,geocoding:!0},CATALAN:{code:"ca",flag:"name:ca",name:"Catalan",latin:!0,isMode:!1,geocoding:!0},CHINESE:{code:"zh",flag:"name:zh",name:"Chinese",latin:!1,isMode:!1,geocoding:!0},TRADITIONAL_CHINESE:{code:"zh-Hant",flag:"name:zh-Hant",name:"Chinese (traditional)",latin:!1,isMode:!1,geocoding:!1},SIMPLIFIED_CHINESE:{code:"zh-Hans",flag:"name:zh-Hans",name:"Chinese (simplified)",latin:!1,isMode:!1,geocoding:!1},CORSICAN:{code:"co",flag:"name:co",name:"Corsican",latin:!0,isMode:!1,geocoding:!1},CZECH:{code:"cs",flag:"name:cs",name:"Czech",latin:!0,isMode:!1,geocoding:!1},WELSH:{code:"cy",flag:"name:cy",name:"WELSH",latin:!0,isMode:!1,geocoding:!0},DANISH:{code:"da",flag:"name:da",name:"Danish",latin:!0,isMode:!1,geocoding:!0},GERMAN:{code:"de",flag:"name:de",name:"German",latin:!0,isMode:!1,geocoding:!0},GREEK:{code:"el",flag:"name:el",name:"Greek",latin:!1,isMode:!1,geocoding:!0},ENGLISH:{code:"en",flag:"name:en",name:"English",latin:!0,isMode:!1,geocoding:!0},ESPERANTO:{code:"eo",flag:"name:eo",name:"Esperanto",latin:!0,isMode:!1,geocoding:!0},SPANISH:{code:"es",flag:"name:es",name:"Spanish",latin:!0,isMode:!1,geocoding:!0},ESTONIAN:{code:"et",flag:"name:et",name:"Estonian",latin:!0,isMode:!1,geocoding:!0},BASQUE:{code:"eu",flag:"name:eu",name:"Basque",latin:!0,isMode:!1,geocoding:!1},FINNISH:{code:"fi",flag:"name:fi",name:"Finnish",latin:!0,isMode:!1,geocoding:!0},FRENCH:{code:"fr",flag:"name:fr",name:"French",latin:!0,isMode:!1,geocoding:!0},FRISIAN:{code:"fy",flag:"name:fy",name:"Frisian (West)",latin:!0,isMode:!1,geocoding:!0},IRISH:{code:"ga",flag:"name:ga",name:"Irish",latin:!0,isMode:!1,geocoding:!0},SCOTTISH_GAELIC:{code:"gd",flag:"name:gd",name:"Scottish Gaelic",latin:!0,isMode:!1,geocoding:!0},HEBREW:{code:"he",flag:"name:he",name:"Hebrew",latin:!1,isMode:!1,geocoding:!0},HINDI:{code:"hi",flag:"name:hi",name:"Hindi",latin:!1,isMode:!1,geocoding:!1},CROATIAN:{code:"hr",flag:"name:hr",name:"Croatian",latin:!0,isMode:!1,geocoding:!0},HUNGARIAN:{code:"hu",flag:"name:hu",name:"Hungarian",latin:!0,isMode:!1,geocoding:!0},ARMENIAN:{code:"hy",flag:"name:hy",name:"Armenian",latin:!1,isMode:!1,geocoding:!0},INDONESIAN:{code:"id",flag:"name:id",name:"Indonesian",latin:!0,isMode:!1,geocoding:!1},ICELANDIC:{code:"is",flag:"name:is",name:"Icelandic",latin:!0,isMode:!1,geocoding:!0},ITALIAN:{code:"it",flag:"name:it",name:"Italian",latin:!0,isMode:!1,geocoding:!0},JAPANESE:{code:"ja",flag:"name:ja",name:"Japanese",latin:!1,isMode:!1,geocoding:!0},JAPANESE_HIRAGANA:{code:"ja-Hira",flag:"name:ja-Hira",name:"Japanese Hiragana form",latin:!1,isMode:!1,geocoding:!1},JAPANESE_2018:{code:"ja-Latn",flag:"name:ja-Latn",name:"Japanese (Latin 2018)",latin:!0,isMode:!1,geocoding:!1},JAPANESE_KANA:{code:"ja_kana",flag:"name:ja_kana",name:"Japanese (Kana)",latin:!1,isMode:!1,geocoding:!1},JAPANESE_LATIN:{code:"ja_rm",flag:"name:ja_rm",name:"Japanese (Latin script)",latin:!0,isMode:!1,geocoding:!1},GEORGIAN:{code:"ka",flag:"name:ka",name:"Georgian",latin:!1,isMode:!1,geocoding:!0},KAZAKH:{code:"kk",flag:"name:kk",name:"Kazakh",latin:!1,isMode:!1,geocoding:!0},KANNADA:{code:"kn",flag:"name:kn",name:"Kannada",latin:!0,isMode:!1,geocoding:!0},KOREAN:{code:"ko",flag:"name:ko",name:"Korean",latin:!1,isMode:!1,geocoding:!0},KOREAN_LATIN:{code:"ko-Latn",flag:"name:ko-Latn",name:"Korean (Latin script)",latin:!0,isMode:!1,geocoding:!1},KURDISH:{code:"ku",flag:"name:ku",name:"Kurdish",latin:!0,isMode:!1,geocoding:!1},CLASSICAL_LATIN:{code:"la",flag:"name:la",name:"Latin",latin:!0,isMode:!1,geocoding:!0},LUXEMBOURGISH:{code:"lb",flag:"name:lb",name:"Luxembourgish",latin:!0,isMode:!1,geocoding:!0},LITHUANIAN:{code:"lt",flag:"name:lt",name:"Lithuanian",latin:!0,isMode:!1,geocoding:!0},LATVIAN:{code:"lv",flag:"name:lv",name:"Latvian",latin:!0,isMode:!1,geocoding:!0},MACEDONIAN:{code:"mk",flag:"name:mk",name:"Macedonian",latin:!1,isMode:!1,geocoding:!0},MALAYALAM:{code:"ml",flag:"name:ml",name:"Malayalam",latin:!1,isMode:!1,geocoding:!1},MALTESE:{code:"mt",flag:"name:mt",name:"Maltese",latin:!0,isMode:!1,geocoding:!0},DUTCH:{code:"nl",flag:"name:nl",name:"Dutch",latin:!0,isMode:!1,geocoding:!0},NORWEGIAN:{code:"no",flag:"name:no",name:"Norwegian",latin:!0,isMode:!1,geocoding:!0},OCCITAN:{code:"oc",flag:"name:oc",name:"Occitan",latin:!0,isMode:!1,geocoding:!1},POLISH:{code:"pl",flag:"name:pl",name:"Polish",latin:!0,isMode:!1,geocoding:!0},PERSIAN:{code:"fa",flag:"name:fa",name:"Persian",latin:!1,isMode:!1,geocoding:!1},PUNJABI:{code:"pa",flag:"name:pa",name:"Punjabi",latin:!1,isMode:!1,geocoding:!1},WESTERN_PUNJABI:{code:"pnb",flag:"name:pnb",name:"Western Punjabi",latin:!1,isMode:!1,geocoding:!1},PORTUGUESE:{code:"pt",flag:"name:pt",name:"Portuguese",latin:!0,isMode:!1,geocoding:!0},ROMANSH:{code:"rm",flag:"name:rm",name:"Romansh",latin:!0,isMode:!1,geocoding:!0},ROMANIAN:{code:"ro",flag:"name:ro",name:"Romanian",latin:!0,isMode:!1,geocoding:!0},RUSSIAN:{code:"ru",flag:"name:ru",name:"Russian",latin:!1,isMode:!1,geocoding:!0},SLOVAK:{code:"sk",flag:"name:sk",name:"Slovak",latin:!0,isMode:!1,geocoding:!0},SLOVENE:{code:"sl",flag:"name:sl",name:"Slovene",latin:!0,isMode:!1,geocoding:!0},ALBANIAN:{code:"sq",flag:"name:sq",name:"Albanian",latin:!0,isMode:!1,geocoding:!0},SERBIAN_CYRILLIC:{code:"sr",flag:"name:sr",name:"Serbian (Cyrillic script)",latin:!1,isMode:!1,geocoding:!0},SERBIAN_LATIN:{code:"sr-Latn",flag:"name:sr-Latn",name:"Serbian (Latin script)",latin:!0,isMode:!1,geocoding:!1},SWEDISH:{code:"sv",flag:"name:sv",name:"Swedish",latin:!0,isMode:!1,geocoding:!0},TAMIL:{code:"ta",flag:"name:ta",name:"Tamil",latin:!1,isMode:!1,geocoding:!1},TELUGU:{code:"te",flag:"name:te",name:"Telugu",latin:!1,isMode:!1,geocoding:!1},THAI:{code:"th",flag:"name:th",name:"Thai",latin:!1,isMode:!1,geocoding:!0},TURKISH:{code:"tr",flag:"name:tr",name:"Turkish",latin:!0,isMode:!1,geocoding:!0},UKRAINIAN:{code:"uk",flag:"name:uk",name:"Ukrainian",latin:!1,isMode:!1,geocoding:!0},VIETNAMESE:{code:"vi",flag:"name:vi",name:"Vietnamese (Latin script)",latin:!0,isMode:!1,geocoding:!1}};function ee(e,n=I){return e in n?e[e]:null}function k(e,n=I){for(const t of Object.values(n))if(t.code===e)return t;return null}function N(e,n=I){for(const t of Object.values(n))if(t.flag===e)return t;return null}function j(){if(typeof navigator>"u"){const e=Intl.DateTimeFormat().resolvedOptions().locale.split("-")[0];return k(e)??I.ENGLISH}return Array.from(new Set(navigator.languages.map(e=>e.split("-")[0]))).map(e=>k(e)).filter(e=>e)[0]??I.ENGLISH}function H(e){return e!==null&&typeof e=="object"&&"code"in e&&"flag"in e&&"name"in e&&"latin"in e&&"isMode"in e&&"geocoding"in e&&(typeof e.code=="string"||e.code===null)&&typeof e.flag=="string"&&typeof e.name=="string"&&typeof e.latin=="boolean"&&typeof e.isMode=="boolean"&&typeof e.geocoding=="boolean"}function O(e,n=I){return H(e)?N(e.flag,n):typeof e!="string"?null:ee(e,n)||k(e,n)||N(e,n)||null}function we(e,n,t=I){const a=O(e,t),i=O(n,t);return a&&i&&a.flag===i.flag}async function S(e,n={}){if(m.fetch===null)throw new Error("The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch");if(new URL(e).searchParams.get("key").trim()==="")throw new Error("The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com");return m.fetch(e,n)}const y={maptilerApiURL:"https://api.maptiler.com/",mapStyle:"streets-v2"};Object.freeze(y);class L extends Error{constructor(n,t=""){super(`Call to enpoint ${n.url} failed with the status code ${n.status}. ${t}`),this.res=n}}const P={400:"Query too long / Invalid parameters",403:"Key is missing, invalid or restricted"};function ne(e,n){const{language:t}=n;if(t===void 0)return;const a=(Array.isArray(t)?t:[t]).map(o=>Ee(o)).filter(o=>o),i=Array.from(new Set(a)).join(",");e.set("language",i)}function Ee(e){let n=null;return e===I.AUTO.flag?n=j():typeof e=="string"?n=k(e):H(e)&&(n=e.flag===I.AUTO.flag?j():N(e.flag)),n&&n.geocoding?n.code:null}function te(e,n){const{apiKey:t,limit:a,types:i,excludeTypes:o}=n;e.set("key",t??m.apiKey),a!==void 0&&e.set("limit",String(a)),i!==void 0&&e.set("types",i.join(",")),o!==void 0&&e.set("excludeTypes",String(o)),ne(e,n)}function ae(e,n){te(e,n);const{bbox:t,proximity:a,country:i,fuzzyMatch:o,autocomplete:r}=n;t!==void 0&&e.set("bbox",t.join(",")),a!==void 0&&e.set("proximity",a==="ip"?a:a.join(",")),i!==void 0&&e.set("country",i.join(",")),o!==void 0&&e.set("fuzzyMatch",o?"true":"false"),r!==void 0&&e.set("autocomplete",r?"true":"false")}async function Ue(e,n={}){if(typeof e!="string"||e.trim().length===0)throw new Error("The query must be a non-empty string");const t=new URL(`geocoding/${encodeURIComponent(e)}.json`,y.maptilerApiURL),{searchParams:a}=t;ae(a,n);const i=t.toString(),o=await S(i);if(!o.ok)throw new L(o,P[o.status]??"");return await o.json()}async function ke(e,n={}){if(!Array.isArray(e)||e.length<2)throw new Error("The position must be an array of form [lng, lat].");const t=new URL(`geocoding/${e[0]},${e[1]}.json`,y.maptilerApiURL);te(t.searchParams,n);const a=t.toString(),i=await S(a);if(!i.ok)throw new L(i,P[i.status]??"");return await i.json()}async function De(e,n={}){const t=new URL(`geocoding/${e}.json`,y.maptilerApiURL);t.searchParams.set("key",n.apiKey??m.apiKey),ne(t.searchParams,n);const a=t.toString(),i=await S(a);if(!i.ok)throw new L(i,P[i.status]??"");return await i.json()}async function Ne(e,n={}){if(!e.length)return[];const t=e.map(c=>encodeURIComponent(c)).join(";"),a=new URL(`geocoding/${t}.json`,y.maptilerApiURL),{searchParams:i}=a;ae(i,n);const o=a.toString(),r=await S(o);if(!r.ok)throw new L(r,P[r.status]??"");const s=await r.json();return e.length===1?[s]:s}const Pe={forward:Ue,reverse:ke,byId:De,batch:Ne},ie={403:"Key is missing, invalid or restricted"};async function $e(e={}){const n=new URL("geolocation/ip.json",y.maptilerApiURL);n.searchParams.set("key",e.apiKey??m.apiKey);const t=n.toString(),a=await S(t);if(!a.ok)throw new L(a,a.status in ie?ie[a.status]:"");return await a.json()}const be={info:$e},$={403:"Key is missing, invalid or restricted"};async function Ce(e,n={}){if(typeof e!="string"||e.trim().length===0)throw new Error("The query must be a non-empty string");const t=new URL(`coordinates/search/${e}.json`,y.maptilerApiURL);t.searchParams.set("key",n.apiKey??m.apiKey),"limit"in n&&t.searchParams.set("limit",n.limit.toString()),"transformations"in n&&t.searchParams.set("transformations",n.transformations.toString()),"exports"in n&&t.searchParams.set("exports",n.exports.toString());const a=t.toString(),i=await S(a);if(!i.ok)throw new L(i,i.status in $?$[i.status]:"");return await i.json()}async function Ke(e,n={}){const t=(Array.isArray(e[0])?e:[e]).map(r=>`${r[0]},${r[1]}`).join(";"),a=new URL(`coordinates/transform/${t}.json`,y.maptilerApiURL);a.searchParams.set("key",n.apiKey??m.apiKey),"sourceCrs"in n&&a.searchParams.set("s_srs",n.sourceCrs.toString()),"targetCrs"in n&&a.searchParams.set("t_srs",n.targetCrs.toString()),"operations"in n&&a.searchParams.set("ops",(Array.isArray(n.operations)?n.operations:[n.operations]).join("|"));const i=a.toString(),o=await S(i);if(!o.ok)throw new L(o,o.status in $?$[o.status]:"");return await o.json()}const je={search:Ce,transform:Ke},oe={403:"Key is missing, invalid or restricted"};async function He(e,n={}){if(typeof e!="string"||e.trim().length===0)throw new Error("The data ID must be a non-empty string");const t=new URL(`data/${encodeURIComponent(e)}/features.json`,y.maptilerApiURL);t.searchParams.set("key",n.apiKey??m.apiKey);const a=t.toString(),i=await S(a);if(!i.ok)throw new L(i,i.status in oe?oe[i.status]:"");return await i.json()}const Oe={get:He};function re(e){const n=/^maptiler:\/\/(.*)/;let t;const a=e.trim();let i;return a.startsWith("http://")||a.startsWith("https://")?i=a:(t=n.exec(a))!==null?i=`https://api.maptiler.com/maps/${t[1]}/style.json`:i=`https://api.maptiler.com/maps/${a}/style.json`,i}class x{constructor(n,t,a,i,o,r){this.name=n,this.variantType=t,this.id=a,this.referenceStyle=i,this.description=o,this.imageURL=r}getName(){return this.name}getFullName(){return`${this.referenceStyle.getName()} ${this.name}`}getType(){return this.variantType}getId(){return this.id}getDescription(){return this.description}getReferenceStyle(){return this.referenceStyle}hasVariant(n){return this.referenceStyle.hasVariant(n)}getVariant(n){return this.referenceStyle.getVariant(n)}getVariants(){return this.referenceStyle.getVariants().filter(n=>n!==this)}getImageURL(){return this.imageURL}getExpandedStyleURL(){return re(this.getId())}}class F{constructor(n,t){this.name=n,this.id=t,this.variants={},this.orderedVariants=[]}getName(){return this.name}getId(){return this.id}addVariant(n){this.variants[n.getType()]=n,this.orderedVariants.push(n)}hasVariant(n){return n in this.variants}getVariant(n){return n in this.variants?this.variants[n]:this.orderedVariants[0]}getVariants(){return Object.values(this.variants)}getDefaultVariant(){return this.orderedVariants[0]}}const b=[{referenceStyleID:"STREETS",name:"Streets",description:"",variants:[{id:"streets-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"streets-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"streets-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""},{id:"streets-v2-night",name:"Night",variantType:"NIGHT",description:"",imageURL:""},{id:"streets-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""}]},{referenceStyleID:"OUTDOOR",name:"Outdoor",description:"",variants:[{id:"outdoor-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"outdoor-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""}]},{referenceStyleID:"WINTER",name:"Winter",description:"",variants:[{id:"winter-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"winter-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""}]},{referenceStyleID:"SATELLITE",name:"Satellite",description:"",variants:[{id:"satellite",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"HYBRID",name:"Hybrid",description:"",variants:[{id:"hybrid",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"BASIC",name:"Basic",description:"",variants:[{id:"basic-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"basic-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"basic-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"BRIGHT",name:"Bright",description:"",variants:[{id:"bright-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"bright-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"bright-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""},{id:"bright-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""}]},{referenceStyleID:"OPENSTREETMAP",name:"OpenStreetMap",description:"",variants:[{id:"openstreetmap",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"TOPO",name:"Topo",description:"",variants:[{id:"topo-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"topo-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"topo-v2-shiny",name:"Shiny",variantType:"SHINY",description:"",imageURL:""},{id:"topo-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""},{id:"topo-v2-topographique",name:"Topographique",variantType:"TOPOGRAPHIQUE",description:"",imageURL:""}]},{referenceStyleID:"VOYAGER",name:"Voyager",description:"",variants:[{id:"voyager-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"voyager-v2-darkmatter",name:"Darkmatter",variantType:"DARK",description:"",imageURL:""},{id:"voyager-v2-positron",name:"Positron",variantType:"LIGHT",description:"",imageURL:""},{id:"voyager-v2-vintage",name:"Vintage",variantType:"VINTAGE",description:"",imageURL:""}]},{referenceStyleID:"TONER",name:"Toner",description:"",variants:[{id:"toner-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"toner-v2-background",name:"Background",variantType:"BACKGROUND",description:"",imageURL:""},{id:"toner-v2-lite",name:"Lite",variantType:"LITE",description:"",imageURL:""},{id:"toner-v2-lines",name:"Lines",variantType:"LINES",description:"",imageURL:""}]},{referenceStyleID:"DATAVIZ",name:"Dataviz",description:"",variants:[{id:"dataviz",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"dataviz-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"dataviz-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"BACKDROP",name:"Backdrop",description:"",variants:[{id:"backdrop",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"backdrop-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"backdrop-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"OCEAN",name:"Ocean",description:"",variants:[{id:"ocean",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]}];function xe(e){return new Proxy(e,{get(n,t,a){return n.hasVariant(t)?n.getVariant(t):t.toString().toUpperCase()===t?e.getDefaultVariant():Reflect.get(n,t,a)}})}function Fe(){const e={};for(let n=0;n<b.length;n+=1){const t=b[n],a=xe(new F(t.name,t.referenceStyleID));for(let i=0;i<t.variants.length;i+=1){const o=t.variants[i],r=new x(o.name,o.variantType,o.id,a,o.description,o.imageURL);a.addVariant(r)}e[t.referenceStyleID]=a}return e}function C(e){if(!e)return se[b[0].referenceStyleID].getDefaultVariant().getId();if(typeof e=="string"||e instanceof String)return e.trim().toLowerCase();if(e instanceof x)return e.getId();if(e instanceof F)return e.getDefaultVariant().getId()}const se=Fe();function _e(e){const n=[];function t(o){(o.type==="LineString"||o.type==="MultiLineString")&&n.push(o)}function a(o){o.geometry&&t(o.geometry)}function i(o){for(const r of o.features)r.type==="Feature"?a(r):r.type==="FeatureCollection"&&i(r)}return e.type==="Feature"?a(e):e.type==="FeatureCollection"?i(e):t(e),n}function Be(e,n,t){let a=n[0],i=n[1],o=t[0]-a,r=t[1]-i;if(o!==0||r!==0){const s=((e[0]-a)*o+(e[1]-i)*r)/(o*o+r*r);s>1?(a=t[0],i=t[1]):s>0&&(a+=o*s,i+=r*s)}return o=e[0]-a,r=e[1]-i,o*o+r*r}function _(e,n,t,a,i){let o=a,r;for(let s=n+1;s<t;s++){const c=Be(e[s],e[n],e[t]);c>o&&(r=s,o=c)}o>a&&(r-n>1&&_(e,n,r,a,i),i.push(e[r]),t-r>1&&_(e,r,t,a,i))}function Ge(e,n){const t=e.length-1,a=[e[0]];return _(e,0,t,n,a),a.push(e[t]),a}function ze(e,n){if(e.length<=2)return e;const t=n!==void 0?n*n:1;return Ge(e,t)}const ce={extractLineStrings:_e,simplify:ze};function B(e,n=!0){let t=`${e[0]},${e[1]}`;return e.length===3&&n&&(t+=`,${e[2]}`),t}function G(e,n=3e3){let t=e.map(o=>o.join(",")).join("|"),a=5e-6;const i=1e-5;for(;t.length>n;)t=ce.simplify(e,a).map(o=>`${o[0]},${o[1]}`).join("|"),a+=i;return t}function Ve(e,n,t={}){const a=C(t.style),i=t.hiDPI?"@2x":"",o=t.format??"png";let r=~~(t.width??1024),s=~~(t.height??1024);t.hiDPI&&(r=~~(r/2),s=~~(s/2));const c=new URL(`maps/${encodeURIComponent(a)}/static/${e[0]},${e[1]},${n}/${r}x${s}${i}.${o}`,y.maptilerApiURL);if("attribution"in t&&c.searchParams.set("attribution",t.attribution.toString()),"markers"in t){let l="";const d="markerIcon"in t;d&&(l+=`icon:${t.markerIcon}|`),d&&"markerAnchor"in t&&(l+=`anchor:${t.markerAnchor}|`),d&&t.hiDPI&&(l+="scale:2|");const A=Array.isArray(t.markers[0])?t.markers:[t.markers];l+=A.map(h=>B(h,!d)).join("|"),c.searchParams.set("markers",l)}if("path"in t){let l="";if(l+=`fill:${t.pathFillColor??"none"}|`,"pathStrokeColor"in t&&(l+=`stroke:${t.pathStrokeColor}|`),"pathWidth"in t){const d=t.pathWidth/(t.hiDPI?2:1);l+=`width:${d.toString()}|`}l+=G(t.path),c.searchParams.set("path",l)}return c.searchParams.set("key",t.apiKey??m.apiKey),c.toString()}function We(e,n={}){const t=C(n.style),a=n.hiDPI?"@2x":"",i=n.format??"png";let o=~~(n.width??1024),r=~~(n.height??1024);n.hiDPI&&(o=~~(o/2),r=~~(r/2));const s=new URL(`maps/${encodeURIComponent(t)}/static/${e[0]},${e[1]},${e[2]},${e[3]}/${o}x${r}${a}.${i}`,y.maptilerApiURL);if("attribution"in n&&s.searchParams.set("attribution",n.attribution.toString()),"padding"in n&&s.searchParams.set("padding",n.padding.toString()),"markers"in n){let c="";const l="markerIcon"in n;l&&(c+=`icon:${n.markerIcon}|`),l&&"markerAnchor"in n&&(c+=`anchor:${n.markerAnchor}|`),l&&n.hiDPI&&(c+="scale:2|");const d=Array.isArray(n.markers[0])?n.markers:[n.markers];c+=d.map(A=>B(A,!l)).join("|"),s.searchParams.set("markers",c)}if("path"in n){let c="";if(c+=`fill:${n.pathFillColor??"none"}|`,"pathStrokeColor"in n&&(c+=`stroke:${n.pathStrokeColor}|`),"pathWidth"in n){const l=n.pathWidth/(n.hiDPI?2:1);c+=`width:${l.toString()}|`}c+=G(n.path),s.searchParams.set("path",c)}return s.searchParams.set("key",n.apiKey??m.apiKey),s.toString()}function Je(e={}){if(!("markers"in e)&&!("path"in e))throw new Error("Automatic static maps require markers and/or path to be created.");const n=C(e.style),t=e.hiDPI?"@2x":"",a=e.format??"png";let i=~~(e.width??1024),o=~~(e.height??1024);e.hiDPI&&(i=~~(i/2),o=~~(o/2));const r=new URL(`maps/${encodeURIComponent(n)}/static/auto/${i}x${o}${t}.${a}`,y.maptilerApiURL);if("attribution"in e&&r.searchParams.set("attribution",e.attribution.toString()),"padding"in e&&r.searchParams.set("padding",e.padding.toString()),"markers"in e){let s="";const c="markerIcon"in e;c&&(s+=`icon:${e.markerIcon}|`),c&&"markerAnchor"in e&&(s+=`anchor:${e.markerAnchor}|`),c&&e.hiDPI&&(s+="scale:2|");const l=Array.isArray(e.markers[0])?e.markers:[e.markers];s+=l.map(d=>B(d,!c)).join("|"),r.searchParams.set("markers",s)}if("path"in e){let s="";if(s+=`fill:${e.pathFillColor??"none"}|`,"pathStrokeColor"in e&&(s+=`stroke:${e.pathStrokeColor}|`),"pathWidth"in e){const c=e.pathWidth/(e.hiDPI?2:1);s+=`width:${c.toString()}|`}s+=G(e.path),r.searchParams.set("path",s)}return r.searchParams.set("key",e.apiKey??m.apiKey),r.toString()}const qe={centered:Ve,bounded:We,automatic:Je},K=63710088e-1,ge=2*Math.PI*K;function le(e){return(180+e)/360}function de(e){return(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+e*Math.PI/360)))/360}function me(e){const n=pe(e);return[le(n[0]),de(n[1])]}function fe(e){return e*360-180}function he(e){const n=180-e*360;return 360/Math.PI*Math.atan(Math.exp(n*Math.PI/180))-90}function Ye(e){return[fe(e[0]),he(e[1])]}function z(e,n){const t=Math.PI/180,a=e[1]*t,i=n[1]*t,o=Math.sin(a)*Math.sin(i)+Math.cos(a)*Math.cos(i)*Math.cos((n[0]-e[0])*t);return K*Math.acos(Math.min(o,1))}function Ze(e){const n=Array(e.length);n[0]=0;const t=n.length;for(let a=1;a<t;a++)n[a]=z(e[a-1],e[a])+n[a-1];return n}function pe(e){const n=e[0],t=e[1],a=360,i=((n+180)%a+a)%a-180;return[i===-180?180:i,t]}function ue(e){return ge*Math.cos(e*Math.PI/180)}function ye(e,n,t=!0){const a=2**n,i=[e[0]*a,e[1]*a];return t?[~~i[0],~~i[1]]:i}function Qe(e,n,t=!0){const a=me(e);return ye(a,n,t)}function D(e){return e*Math.PI/180}function V(e){return e*180/Math.PI}function Xe(e,n,t){const a=z(e,n),i=D(e[0]),o=D(e[1]),r=D(n[0]),s=D(n[1]),c=a/K,l=Math.sin((1-t)*c)/Math.sin(c),d=Math.sin(t*c)/Math.sin(c),A=l*Math.cos(o)*Math.cos(i)+d*Math.cos(s)*Math.cos(r),h=l*Math.cos(o)*Math.sin(i)+d*Math.cos(s)*Math.sin(r),v=l*Math.sin(o)+d*Math.sin(s),w=Math.atan2(v,Math.sqrt(A*A+h*h)),R=Math.atan2(h,A);return[V(R),V(w)]}const W={EARTH_RADIUS:K,EARTH_CIRCUMFERENCE:ge,longitudeToMercatorX:le,latitudeToMercatorY:de,wgs84ToMercator:me,mercatorXToLongitude:fe,mercatorYToLatitude:he,mercatorToWgs84:Ye,haversineDistanceWgs84:z,wrapWgs84:pe,circumferenceAtLatitude:ue,mercatorToTileIndex:ye,wgs84ToTileIndex:Qe,toRadians:D,toDegrees:V,haversineIntermediateWgs84:Xe,haversineCumulatedDistanceWgs84:Ze};let J=null;function q(){return J||(J=new ve({maxSize:m.tileCacheSize})),J}async function Ae(e){const n=new Blob([e]),t=await createImageBitmap(n),a=document.createElement("canvas"),i=a.getContext("2d");a.width=t.width,a.height=t.height,i.drawImage(t,0,0);const o=i.getImageData(0,0,a.width,a.height);return{pixels:o.data,width:a.width,height:a.height,components:o.data.length/(a.width*a.height)}}function Y(){if(m.bufferToPixelData)return m.bufferToPixelData;if(typeof window<"u")return Ae;throw new Error("An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`")}const en="tiles/terrain-rgb-v2/tiles.json";let T=null;const Z={403:"Key is missing, invalid or restricted"};async function Le(e){const n=new URL(en,y.maptilerApiURL);n.searchParams.set("key",e);const t=n.toString(),a=await S(t);if(a.ok)return T=await a.json(),T;if(!a.ok)throw new L(a,Z[a.status]??"")}async function nn(e,n={}){const t=n.apiKey??m.apiKey;T||await Le(t);const a=T.maxzoom;let i=~~(n.zoom??a);(i>a||i<0)&&(i=a);const o=W.wgs84ToTileIndex(e,i,!1),r=~~o[0],s=~~o[1];if(!T.tiles.length)throw new Error("Terrain tileJSON tile list is empty.");const c=`terrain_${i.toString()}_${r.toString()}_${s.toString()}`;let l;const d=q();if(d.has(c))l=d.get(c);else{const M=T.tiles[0].replace("{x}",r.toString()).replace("{y}",s.toString()).replace("{z}",i.toString()),f=await S(M);if(!f.ok)throw new L(f,Z[f.status]??"");const p=await f.arrayBuffer();l=await Y()(p),d.set(c,l)}const A=~~(l.width*(o[0]%1)),h=(~~(l.height*(o[1]%1))*l.width+A)*l.components,v=l.pixels[h],w=l.pixels[h+1],R=l.pixels[h+2],g=-1e4+(v*256*256+w*256+R)*.1;return[e[0],e[1],g]}async function Q(e,n={}){const t=n.apiKey??m.apiKey;T||await Le(t);const a=Y(),i=T.tiles[0],o=q(),r=T.maxzoom;let s=~~(n.zoom??r);(s>r||s<0)&&(s=r);const c=e.map(g=>W.wgs84ToTileIndex(g,s,!1)),l=c.map(g=>[~~g[0],~~g[1]]).map(g=>`terrain_${s.toString()}_${g[0].toString()}_${g[1].toString()}`),d=Array.from(new Set(l.filter(g=>!o.has(g)))).map(g=>g.split("_").slice(1)),A=d.map(g=>i.replace("{x}",g[1].toString()).replace("{y}",g[2].toString()).replace("{z}",g[0].toString())).map(g=>S(g)),h=(await Promise.allSettled(A)).map(g=>g.status==="fulfilled"?g.value:null).filter(g=>g),v=h.filter(g=>!g.ok);if(h.length!==A.length)throw new Error("Some tiles could not be fetched.");if(v.length)throw new L(v[0],Z[v[0].status]??"");const w=await Promise.all(h.map(g=>g.arrayBuffer()));if(!w.every(g=>g.byteLength>0))throw new Error("Some tiles are not available.");(await Promise.all(w.map(g=>a(g)))).forEach((g,M)=>{const f=d[M],p=`terrain_${f[0].toString()}_${f[1].toString()}_${f[2].toString()}`;o.set(p,g)});const R=e.map((g,M)=>{const f=l[M],p=c[M],u=o.get(f),E=Math.min(Math.round(u.width*(p[0]%1)),u.width-1),U=(Math.min(Math.round(u.height*(p[1]%1)),u.height-1)*u.width+E)*u.components,Se=u.pixels[U],Ie=u.pixels[U+1],Me=u.pixels[U+2],Te=-1e4+(Se*256*256+Ie*256+Me)*.1;return[g[0],g[1],~~(Te*1e3)/1e3]});if(n.smoothingKernelSize){const g=~~(n.smoothingKernelSize/2)*2+1,M=R.map(p=>p[2]),f=~~(g/2);for(let p=f;p<M.length-f-1;p+=1){let u=0;for(let E=0;E<g;E+=1){const U=M[p-f+E];u+=U}u/=g,R[p][2]=u}}return R}async function tn(e,n={}){if(e.type!=="LineString")throw new Error("The provided object is not a GeoJSON LineString");const t=structuredClone(e),a=await Q(t.coordinates,n);return t.coordinates=a,t}async function an(e,n={}){if(e.type!=="MultiLineString")throw new Error("The provided object is not a GeoJSON MultiLineString");const t=structuredClone(e),a=t.coordinates.map(c=>c.length),i=t.coordinates.flat(),o=await Q(i,n),r=[];let s=0;for(const c of a)r.push(o.slice(s,s+c)),s+=c;return t.coordinates=r,t}const on={at:nn,batch:Q,fromLineString:tn,fromMultiLineString:an};export{X as ClientConfig,I as Language,se as MapStyle,x as MapStyleVariant,F as ReferenceMapStyle,L as ServiceError,we as areSameLanguages,Ae as bufferToPixelDataBrowser,ue as circumferenceAtLatitude,m as config,je as coordinates,Oe as data,on as elevation,re as expandMapStyle,Pe as geocoding,be as geolocation,j as getAutoLanguage,Y as getBufferToPixelDataParser,k as getLanguageInfoFromCode,N as getLanguageInfoFromFlag,ee as getLanguageInfoFromKey,q as getTileCache,H as isLanguageInfo,b as mapStylePresetList,W as math,ce as misc,qe as staticMaps,C as styleToStyle,O as toLanguageInfo};
