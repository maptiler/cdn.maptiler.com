{"version":3,"file":"maptiler-client.umd.js","sources":["../src/config.ts","../src/language.ts","../src/callFetch.ts","../src/defaults.ts","../src/services/ServiceError.ts","../src/services/geocoding.ts","../src/services/geolocation.ts","../src/services/coordinates.ts","../src/services/data.ts","../src/mapstyle.ts","../src/misc.ts","../src/services/staticMaps.ts","../src/services/math.ts","../node_modules/quick-lru/index.js","../src/tiledecoding.ts","../src/services/elevation.ts"],"sourcesContent":["import { BufferToPixelDataFunction } from \"./tiledecoding\";\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) => Promise<Response>;\n\nfunction tryGettingFetch() {\n  // this is browser, fetch exists\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n\n  return null;\n}\n\n/**\n * The configuration object definition\n */\nclass ClientConfig {\n  /**\n   * MapTiler Cloud API key\n   */\n  private _apiKey = \"\";\n\n  /**\n   * The fetch function. To be set if in Node < 18, otherwise\n   * will be automatically resolved.\n   */\n  private _fetch: FetchFunction | null = tryGettingFetch();\n\n  /**\n   * Number of tiles to keep in cache\n   */\n  public tileCacheSize: number = 200;\n\n  public bufferToPixelData?: BufferToPixelDataFunction | null;\n\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n  }\n\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f: FetchFunction) {\n    this._fetch = f;\n  }\n\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch(): FetchFunction | null {\n    return this._fetch;\n  }\n}\n\n/**\n * Configuration object\n */\nconst config = new ClientConfig();\n\nexport { ClientConfig, config };\n","export type LanguageInfo = {\n  /**\n   * Two-letter ISO code, such as `\"en\"` for English language.\n   * Can be `null` if the language is a flag to be evaluated at runtime,\n   * as it is the case for some \"modes\".\n   */\n  code: string | null;\n\n  /**\n   * The full OSM language flag, such as `\"name:en\"` for the English language.\n   * Can also be a non-OSM flag if the language needs to be evaluated at runtime, such as `\"auto\"`,\n   * as it is the case for some \"modes\".\n   */\n  flag: string;\n\n  /**\n   * English name of the language.\n   */\n  name: string;\n\n  /**\n   * Whether the language leverages only the latin charsets.\n   */\n  latin: boolean;\n\n  /**\n   * Some language descriptions corresponds to \"modes\" rather than to actual languages.\n   * For instance the \"visitor\" mode consists in displaying bilingual labels.\n   */\n  isMode: boolean;\n\n  /**\n   * Whether the language is compatible with the geocoding API\n   */\n  geocoding: boolean;\n};\n\n/**\n * List of \"non-ISO specific\" languages.\n */\nexport const NonISOLanguage = {\n  /**\n   * Language mode to display the labels in the end user's device language.\n   */\n  AUTO: {\n    code: null,\n    flag: \"auto\",\n    name: \"Auto\",\n    latin: false,\n    isMode: true,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * The OSM language using latin script. MapTiler discourages its use as a primary language setting due to the lack of actual linguistic specificity,\n   * though it can be an handy fallback. This is not to be confused with the \"Classical Latin\" language, which is available under the tag `.CLASSICAL_LATIN`.\n   */\n  LATIN: {\n    code: \"latin\",\n    flag: \"name:latin\",\n    name: \"Latin\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * The OSM language using non-latin script. MapTiler discourages its use as a primary language setting due to the lack of actual linguistic specificity,\n   * though it can be an handy fallback.\n   */\n  NON_LATIN: {\n    code: \"nonlatin\",\n    flag: \"name:nonlatin\",\n    name: \"Non Latin\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Using the local language generaly (but not always) means that every labels of a given region will use the dominant local language.\n   */\n  LOCAL: {\n    code: null,\n    flag: \"name\",\n    name: \"Local\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n} as const;\n\n/**\n * List of \"country specific\" languages.\n */\nexport const ISOLanguage = {\n  /**\n   * Albanian language\n   */\n  ALBANIAN: {\n    code: \"sq\",\n    flag: \"name:sq\",\n    name: \"Albanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Amharic language\n   */\n  AMHARIC: {\n    code: \"am\",\n    flag: \"name:am\",\n    name: \"Amharic\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Arabic language (right-to-left script)\n   */\n  ARABIC: {\n    code: \"ar\",\n    flag: \"name:ar\",\n    name: \"Arabic\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Armenian language\n   */\n  ARMENIAN: {\n    code: \"hy\",\n    flag: \"name:hy\",\n    name: \"Armenian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Azerbaijani language\n   */\n  AZERBAIJANI: {\n    code: \"az\",\n    flag: \"name:az\",\n    name: \"Azerbaijani\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Basque language\n   */\n  BASQUE: {\n    code: \"eu\",\n    flag: \"name:eu\",\n    name: \"Basque\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Belarusian langauge\n   */\n  BELARUSIAN: {\n    code: \"be\",\n    flag: \"name:be\",\n    name: \"Belarusian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bengali language\n   */\n  BENGALI: {\n    code: \"bn\",\n    flag: \"name:bn\",\n    name: \"Bengali\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bosnian language\n   */\n  BOSNIAN: {\n    code: \"bs\",\n    flag: \"name:bs\",\n    name: \"Bosnian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Breton language\n   */\n  BRETON: {\n    code: \"br\",\n    flag: \"name:br\",\n    name: \"Breton\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Bulgarian language\n   */\n  BULGARIAN: {\n    code: \"bg\",\n    flag: \"bg\",\n    name: \"Bulgarian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Catalan language\n   */\n  CATALAN: {\n    code: \"ca\",\n    flag: \"name:ca\",\n    name: \"Catalan\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Chinese language\n   */\n  CHINESE: {\n    code: \"zh\",\n    flag: \"name:zh\",\n    name: \"Chinese\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Traditional Chinese language\n   */\n  TRADITIONAL_CHINESE: {\n    code: \"zh-Hant\",\n    flag: \"name:zh-Hant\",\n    name: \"Chinese (traditional)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Simplified Chinese language\n   */\n  SIMPLIFIED_CHINESE: {\n    code: \"zh-Hans\",\n    flag: \"name:zh-Hans\",\n    name: \"Chinese (simplified)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Corsican language\n   */\n  CORSICAN: {\n    code: \"co\",\n    flag: \"name:co\",\n    name: \"Corsican\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Croatian language\n   */\n  CROATIAN: {\n    code: \"hr\",\n    flag: \"name:hr\",\n    name: \"Croatian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Czech language\n   */\n  CZECH: {\n    code: \"cs\",\n    flag: \"name:cs\",\n    name: \"Czech\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Danish language\n   */\n  DANISH: {\n    code: \"da\",\n    flag: \"name:da\",\n    name: \"Danish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Dutch language\n   */\n  DUTCH: {\n    code: \"nl\",\n    flag: \"name:nl\",\n    name: \"Dutch\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * German language\n   */\n  GERMAN: {\n    code: \"de\",\n    flag: \"name:de\",\n    name: \"German\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Greek language\n   */\n  GREEK: {\n    code: \"el\",\n    flag: \"name:el\",\n    name: \"Greek\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * English language\n   */\n  ENGLISH: {\n    code: \"en\",\n    flag: \"name:en\",\n    name: \"English\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Esperanto language\n   */\n  ESPERANTO: {\n    code: \"eo\",\n    flag: \"name:eo\",\n    name: \"Esperanto\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Estonian language\n   */\n  ESTONIAN: {\n    code: \"et\",\n    flag: \"name:et\",\n    name: \"Estonian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Finnish language\n   */\n  FINNISH: {\n    code: \"fi\",\n    flag: \"name:fi\",\n    name: \"Finnish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * French language\n   */\n  FRENCH: {\n    code: \"fr\",\n    flag: \"name:fr\",\n    name: \"French\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Frisian language\n   */\n  FRISIAN: {\n    code: \"fy\",\n    flag: \"name:fy\",\n    name: \"Frisian (West)\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Georgian language\n   */\n  GEORGIAN: {\n    code: \"ka\",\n    flag: \"name:ka\",\n    name: \"Georgian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hebrew language (right-to-left non-latin script)\n   */\n  HEBREW: {\n    code: \"he\",\n    flag: \"name:he\",\n    name: \"Hebrew\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hindi language\n   */\n  HINDI: {\n    code: \"hi\",\n    flag: \"name:hi\",\n    name: \"Hindi\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Hungarian language\n   */\n  HUNGARIAN: {\n    code: \"hu\",\n    flag: \"name:hu\",\n    name: \"Hungarian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Icelandic language\n   */\n  ICELANDIC: {\n    code: \"is\",\n    flag: \"name:is\",\n    name: \"Icelandic\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Indonesian language\n   */\n  INDONESIAN: {\n    code: \"id\",\n    flag: \"name:id\",\n    name: \"Indonesian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Irish language\n   */\n  IRISH: {\n    code: \"ga\",\n    flag: \"name:ga\",\n    name: \"Irish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Italian language\n   */\n  ITALIAN: {\n    code: \"it\",\n    flag: \"name:it\",\n    name: \"Italian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language\n   */\n  JAPANESE: {\n    code: \"ja\",\n    flag: \"name:ja\",\n    name: \"Japanese\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language in Hiragana form\n   */\n  JAPANESE_HIRAGANA: {\n    code: \"ja-Hira\",\n    flag: \"name:ja-Hira\",\n    name: \"Japanese Hiragana form\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language (latin script)\n   */\n  JAPANESE_2018: {\n    code: \"ja-Latn\",\n    flag: \"name:ja-Latn\",\n    name: \"Japanese (Latin 2018)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanese language in Kana form (non-latin script)\n   */\n  JAPANESE_KANA: {\n    code: \"ja_kana\",\n    flag: \"name:ja_kana\",\n    name: \"Japanese (Kana)\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Japanse language, romanized (latin script)\n   */\n  JAPANESE_LATIN: {\n    code: \"ja_rm\",\n    flag: \"name:ja_rm\",\n    name: \"Japanese (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Kannada language\n   */\n  KANNADA: {\n    code: \"kn\",\n    flag: \"name:kn\",\n    name: \"Kannada\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Kazakh language\n   */\n  KAZAKH: {\n    code: \"kk\",\n    flag: \"name:kk\",\n    name: \"Kazakh\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Korean language\n   */\n  KOREAN: {\n    code: \"ko\",\n    flag: \"name:ko\",\n    name: \"Korean\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Korean language (latin script)\n   */\n  KOREAN_LATIN: {\n    code: \"ko-Latn\",\n    flag: \"name:ko-Latn\",\n    name: \"Korean (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Kurdish language\n   */\n  KURDISH: {\n    code: \"ku\",\n    flag: \"name:ku\",\n    name: \"Kurdish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Classical Latin language\n   */\n  CLASSICAL_LATIN: {\n    code: \"la\",\n    flag: \"name:la\",\n    name: \"Latin\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Latvian language\n   */\n  LATVIAN: {\n    code: \"lv\",\n    flag: \"name:lv\",\n    name: \"Latvian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Lithuanian language\n   */\n  LITHUANIAN: {\n    code: \"lt\",\n    flag: \"name:lt\",\n    name: \"Lithuanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Luxembourgish language\n   */\n  LUXEMBOURGISH: {\n    code: \"lb\",\n    flag: \"name:lb\",\n    name: \"Luxembourgish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Macedonian language\n   */\n  MACEDONIAN: {\n    code: \"mk\",\n    flag: \"name:mk\",\n    name: \"Macedonian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Malayalm language\n   */\n  MALAYALAM: {\n    code: \"ml\",\n    flag: \"name:ml\",\n    name: \"Malayalam\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Maltese language\n   */\n  MALTESE: {\n    code: \"mt\",\n    flag: \"name:mt\",\n    name: \"Maltese\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Norwegian language\n   */\n  NORWEGIAN: {\n    code: \"no\",\n    flag: \"name:no\",\n    name: \"Norwegian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Occitan language\n   */\n  OCCITAN: {\n    code: \"oc\",\n    flag: \"name:oc\",\n    name: \"Occitan\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Persian language\n   */\n  PERSIAN: {\n    code: \"fa\",\n    flag: \"name:fa\",\n    name: \"Persian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Polish language\n   */\n  POLISH: {\n    code: \"pl\",\n    flag: \"name:pl\",\n    name: \"Polish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Portuguese language\n   */\n  PORTUGUESE: {\n    code: \"pt\",\n    flag: \"name:pt\",\n    name: \"Portuguese\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Punjabi language\n   */\n  PUNJABI: {\n    code: \"pa\",\n    flag: \"name:pa\",\n    name: \"Punjabi\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Western Punjabi language\n   */\n  WESTERN_PUNJABI: {\n    code: \"pnb\",\n    flag: \"name:pnb\",\n    name: \"Western Punjabi\",\n    latin: false,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Romanian language\n   */\n  ROMANIAN: {\n    code: \"ro\",\n    flag: \"name:ro\",\n    name: \"Romanian\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Romansh language\n   */\n  ROMANSH: {\n    code: \"rm\",\n    flag: \"name:rm\",\n    name: \"Romansh\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Russian language\n   */\n  RUSSIAN: {\n    code: \"ru\",\n    flag: \"name:ru\",\n    name: \"Russian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Serbian language (cyrillic script)\n   */\n  SERBIAN_CYRILLIC: {\n    code: \"sr\",\n    flag: \"name:sr\",\n    name: \"Serbian (Cyrillic script)\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Serbian language (latin script)\n   */\n  SERBIAN_LATIN: {\n    code: \"sr-Latn\",\n    flag: \"name:sr-Latn\",\n    name: \"Serbian (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: false,\n  } as LanguageInfo,\n\n  /**\n   * Scottish Gaelic language\n   */\n  SCOTTISH_GAELIC: {\n    code: \"gd\",\n    flag: \"name:gd\",\n    name: \"Scottish Gaelic\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Slovak language\n   */\n  SLOVAK: {\n    code: \"sk\",\n    flag: \"name:sk\",\n    name: \"Slovak\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Slovene language\n   */\n  SLOVENE: {\n    code: \"sl\",\n    flag: \"name:sl\",\n    name: \"Slovene\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Spanish language\n   */\n  SPANISH: {\n    code: \"es\",\n    flag: \"name:es\",\n    name: \"Spanish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Swedish language\n   */\n  SWEDISH: {\n    code: \"sv\",\n    flag: \"name:sv\",\n    name: \"Swedish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Tamil language\n   */\n  TAMIL: {\n    code: \"ta\",\n    flag: \"name:ta\",\n    name: \"Tamil\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Telugu language\n   */\n  TELUGU: {\n    code: \"te\",\n    flag: \"name:te\",\n    name: \"Telugu\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Thai language\n   */\n  THAI: {\n    code: \"th\",\n    flag: \"name:th\",\n    name: \"Thai\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Turkish language\n   */\n  TURKISH: {\n    code: \"tr\",\n    flag: \"name:tr\",\n    name: \"Turkish\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Ukrainian language\n   */\n  UKRAINIAN: {\n    code: \"uk\",\n    flag: \"name:uk\",\n    name: \"Ukrainian\",\n    latin: false,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Vietnamese language (latin script)\n   */\n  VIETNAMESE: {\n    code: \"vi\",\n    flag: \"name:vi\",\n    name: \"Vietnamese (Latin script)\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n\n  /**\n   * Welsh language\n   */\n  WELSH: {\n    code: \"cy\",\n    flag: \"name:cy\",\n    name: \"Welsh\",\n    latin: true,\n    isMode: false,\n    geocoding: true,\n  } as LanguageInfo,\n} as const;\n\n/**\n * The complete list of languages\n */\nexport const Language = {\n  ...NonISOLanguage,\n  ...ISOLanguage,\n} as const;\n\n/**\n * Get language infos from a provided language key, the key being the no-whitespace capital name.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromKey(\n  languageKey: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  if (languageKey in languageDictionary) {\n    return languageKey[languageKey];\n  }\n  return null;\n}\n\n/**\n * Get the language info from a provided 2-character iso code.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromCode(\n  languageCode: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  for (const lang of Object.values(languageDictionary)) {\n    if (lang.code === languageCode) {\n      return lang;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the language info from a language flag (e.g. `\"name:en\"`).\n * This is also handy to check is a given language flag is a supported language.\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n * Returns `null` if not found.\n */\nexport function getLanguageInfoFromFlag(\n  languageFlag: string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  for (const lang of Object.values(languageDictionary)) {\n    if (lang.flag === languageFlag) {\n      return lang;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the default language of the device, as a LanguageInfo object.\n */\nexport function getAutoLanguage(): LanguageInfo {\n  if (typeof navigator === \"undefined\") {\n    const code = Intl.DateTimeFormat().resolvedOptions().locale.split(\"-\")[0];\n    const langInfo = getLanguageInfoFromCode(code);\n    return langInfo ?? Language.ENGLISH;\n  }\n\n  const canditatelangs = Array.from(\n    new Set(navigator.languages.map((l) => l.split(\"-\")[0])),\n  )\n    .map((code) => getLanguageInfoFromCode(code))\n    .filter((li) => li);\n\n  return canditatelangs[0] ?? Language.ENGLISH;\n}\n\nexport function isLanguageInfo(obj: unknown): obj is LanguageInfo {\n  return (\n    obj !== null &&\n    typeof obj === \"object\" &&\n    \"code\" in obj &&\n    \"flag\" in obj &&\n    \"name\" in obj &&\n    \"latin\" in obj &&\n    \"isMode\" in obj &&\n    \"geocoding\" in obj &&\n    (typeof obj.code === \"string\" || obj.code === null) &&\n    typeof obj.flag === \"string\" &&\n    typeof obj.name === \"string\" &&\n    typeof obj.latin === \"boolean\" &&\n    typeof obj.isMode === \"boolean\" &&\n    typeof obj.geocoding === \"boolean\"\n  );\n}\n\n/**\n * By default, the language dictionary to look into is the one defined in this library, but another one could be provided\n */\nexport function toLanguageInfo(\n  lang: LanguageInfo | string,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): LanguageInfo | null {\n  // Could be directly an object of type LanguageInfo\n  if (isLanguageInfo(lang)) {\n    // Yet we want to make sure the provided languageInfo obj is not corrupted or incomplete,\n    // so we ask for the equivalent original:\n    return getLanguageInfoFromFlag(lang.flag, languageDictionary); // possibly returns null, which is fine.\n  }\n\n  // If it's not even a string, then it does not represent a language\n  if (typeof lang !== \"string\") {\n    return null;\n  }\n\n  return (\n    getLanguageInfoFromKey(lang, languageDictionary) ||\n    getLanguageInfoFromCode(lang, languageDictionary) ||\n    getLanguageInfoFromFlag(lang, languageDictionary) ||\n    null\n  );\n}\n\n/**\n * Tells if two languages are the same, even though possibly provided under different forms.\n * Note: this is not comparing object references, but values.\n */\nexport function areSameLanguages(\n  langA: string | LanguageInfo,\n  langB: string | LanguageInfo,\n  languageDictionary: { [k: string]: LanguageInfo } = Language,\n): boolean {\n  const langAObj = toLanguageInfo(langA, languageDictionary);\n  const langBObj = toLanguageInfo(langB, languageDictionary);\n\n  return langAObj && langBObj && langAObj.flag === langBObj.flag;\n}\n","import { config } from \"./config\";\n\nexport async function callFetch(resource, options = {}) {\n  if (config.fetch === null) {\n    throw new Error(\n      \"The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch\",\n    );\n  }\n\n  //  Control if URL contains the api key\n  if (new URL(resource).searchParams.get(\"key\").trim() === \"\") {\n    throw new Error(\n      \"The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com\",\n    );\n  }\n\n  return config.fetch(resource, options);\n}\n","/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  mapStyle: \"streets-v2\",\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport class ServiceError extends Error {\n  constructor(\n    public res: Response,\n    customMessage = \"\",\n  ) {\n    super(\n      `Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`,\n    );\n  }\n}\n","import type { BBox, Feature, Geometry, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\n\nimport {\n  type LanguageInfo,\n  getAutoLanguage,\n  getLanguageInfoFromCode,\n  isLanguageInfo,\n  Language,\n  getLanguageInfoFromFlag,\n} from \"../language\";\n\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type LanguageGeocodingOptions = {\n  /**\n   * Prefer results in specific language. It’s possible to specify multiple values.\n   */\n  language?: string | Array<string> | LanguageInfo | Array<LanguageInfo>;\n};\n\nexport type GeocodingPlaceType =\n  | \"continental_marine\"\n  | \"country\"\n  | \"major_landform\"\n  | \"region\"\n  | \"subregion\"\n  | \"county\"\n  | \"joint_municipality\"\n  | \"joint_submunicipality\"\n  | \"municipality\"\n  | \"municipal_district\"\n  | \"locality\"\n  | \"neighbourhood\"\n  | \"place\"\n  | \"postal_code\"\n  | \"address\"\n  | \"road\"\n  | \"poi\";\n\nexport type CommonForwardAndReverseGeocodingOptions =\n  LanguageGeocodingOptions & {\n    /**\n     * Custom MapTiler Cloud API key to use instead of the one in global `config`.\n     */\n    apiKey?: string;\n\n    /**\n     * Maximum number of results to show. Must be between 1 and 10.\n     * For reverse geocoding with multiple `types` this must not be set or must be set to 1.\n     * Default is 5 for forward and 1 for reverse geocoding.\n     */\n    limit?: number;\n\n    /**\n     * Features of specified types to query.\n     * If not specified, feature of all available types except `poi` and `major_landform` will be queried (`types = [\"poi\", \"major_landform\"]`, `excludeTypes = true`).\n     * In case of reverse geocoding if just a single type is specified, then multiple nearby features of the single type can be returned,\n     * otherwise single feature for every specified type (or default types) can be returned.\n     */\n    types?: GeocodingPlaceType[];\n\n    /**\n     * Set to `true` to use all available feature types except those mentioned in `types`. Default value is `false` if `types` is specified.\n     */\n    excludeTypes?: boolean;\n  };\n\nexport type GeocodingOptions = CommonForwardAndReverseGeocodingOptions & {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: BBox;\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: Position | \"ip\";\n\n  /**\n   * Limit search to specific country/countries specified as list of Alpha-2 ISO 3166-1 codes.\n   */\n  country?: string[];\n\n  /**\n   * Set to `false` to disable fuzzy (typo-tolerant) search. Default is `true`.\n   */\n  fuzzyMatch?: boolean;\n\n  /**\n   * Set to `true` to use autocomplete, `false` to disable it. Default is `true`.\n   */\n  autocomplete?: boolean;\n};\n\nexport type ReverseGeocodingOptions = CommonForwardAndReverseGeocodingOptions;\n\nexport type ByIdGeocodingOptions = LanguageGeocodingOptions & {\n  apiKey?: string;\n};\n\nexport type Coordinates = Position;\n\ntype FeatureProperties = {\n  /**\n   * External reference of the feature used for debugging purposes\n   */\n  ref: string;\n\n  /**\n   * ISO 3166-1 alpha-2 country code of the feature\n   */\n  country_code: string;\n\n  /**\n   * (experimental) Kind of the feature\n   */\n  kind?:\n    | \"road\"\n    | \"road_relation\"\n    | \"admin_area\"\n    | \"place\"\n    | \"street\"\n    | \"virtual_street\";\n\n  /**\n   * (experimental) Value of place=* tag from OpenStreetMap feature if kind=place\n   */\n  \"osm:place_type\"?: string;\n\n  /**\n   * (experimental) Feature tags from OpenStreetMap. Only available for `poi` type.\n   */\n  \"osm:tags\"?: Record<string, string>;\n\n  /**\n   * Array of POI categories. Only available for `poi` type.\n   */\n  categories?: string[];\n\n  /**\n   * Wikidata identifier.\n   */\n  wikidata?: string;\n};\n\ntype FeatureBase = {\n  /**\n   * Unique feature ID\n   */\n  id: string;\n\n  /**\n   * Localized feature name\n   */\n  text: string;\n\n  /**\n   * Query's primary ISO 639-1 language code\n   */\n  language?: string;\n\n  /**\n   * A string analogous to the `text` field that matches the query in the requested language.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [text: `text_${string}`]: string;\n\n  /**\n   * A ISO 639-1 query's fallback language code.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [language: `language_${string}`]: string;\n};\n\nexport type FeatureHierarchy = FeatureProperties & FeatureBase;\n\nexport type GeocodingFeature = Feature<Geometry, FeatureProperties> &\n  FeatureBase & {\n    /**\n     * Bounding box of the original feature as [w, s, e, n] array\n     */\n    bbox: BBox;\n\n    /**\n     * A [lon, lat] array of the original feature centeroid\n     */\n    center: Coordinates;\n\n    /**\n     * Formatted (including the hierarchy) and localized feature full name\n     */\n    place_name: string;\n\n    /**\n     * A string analogous to the `place_name` field that matches the query in the requested language.\n     * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n     */\n    [key: `place_name_${string}`]: string;\n\n    /**\n     * An array of feature types describing the feature.\n     * Currently each feature has only single type but this may change in the future.\n     */\n    place_type: GeocodingPlaceType[];\n\n    /**\n     * Localized type of the place name, matches `place_type` property\n     */\n    place_type_name: string[];\n\n    /**\n     * Feature hierarchy\n     */\n    context?: Array<FeatureHierarchy>;\n\n    /**\n     * Address number, if applicable\n     */\n    address?: string;\n\n    /**\n     * Indicates how well the returned feature matches the user's query on a scale from 0 to 1.\n     * 0 means the result does not match the query text at all, while 1 means the result fully matches the query text.\n     * You can use the relevance property to remove results that don't fully match the query.\n     */\n    relevance: number;\n\n    /**\n     * A string analogous to the `text` field that more closely matches the query than results in the specified language.\n     * For example, querying _Praha, Czechia_ with language set to English (`en`) might return a feature with the `text` _Prague_ and the `matching_text` _Praha_.\n     */\n    matching_text?: string;\n\n    /**\n     * A string analogous to the `place_name` field that more closely matches the query than results in the specified language.\n     * For example, querying _Praha, Czechia_ with language set to English (`en`) might return a feature with the `place_name` _Prague, Czechia_ and a `matching_place_name` of _Praha, Czechia_.\n     */\n    matching_place_name?: string;\n  };\n\nexport type GeocodingSearchResult = {\n  type: \"FeatureCollection\";\n\n  /**\n   * Array of features found\n   */\n  features: Array<GeocodingFeature>;\n\n  /**\n   * Tokenized search query\n   */\n  query: Array<string>;\n\n  /**\n   * Attribution of the result\n   */\n  attribution: string;\n};\n\nfunction addLanguageGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: LanguageGeocodingOptions,\n) {\n  const { language } = options;\n\n  if (language === undefined) {\n    return;\n  }\n\n  // Making it an array of language codes\n  const languageCodes = (Array.isArray(language) ? language : [language])\n    .map((elem) => toValidGeocodingLanguageCode(elem))\n    .filter((elem) => elem); // removing the nulls\n\n  const languages = Array.from(new Set(languageCodes)).join(\",\");\n\n  searchParams.set(\"language\", languages);\n}\n\nfunction toValidGeocodingLanguageCode(\n  lang: string | LanguageInfo,\n): string | null {\n  const langInfo =\n    lang === Language.AUTO.flag\n      ? getAutoLanguage()\n      : typeof lang === \"string\"\n      ? getLanguageInfoFromCode(lang)\n      : isLanguageInfo(lang)\n      ? lang.flag === Language.AUTO.flag\n        ? getAutoLanguage()\n        : getLanguageInfoFromFlag(lang.flag)\n      : null;\n\n  return langInfo?.geocoding ? langInfo.code : null;\n}\n\nfunction addCommonForwardAndReverseGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: CommonForwardAndReverseGeocodingOptions,\n) {\n  const { apiKey, limit, types, excludeTypes } = options;\n\n  searchParams.set(\"key\", apiKey ?? config.apiKey);\n\n  if (limit !== undefined) {\n    searchParams.set(\"limit\", String(limit));\n  }\n\n  if (types !== undefined) {\n    searchParams.set(\"types\", types.join(\",\"));\n  }\n\n  if (excludeTypes !== undefined) {\n    searchParams.set(\"excludeTypes\", String(excludeTypes));\n  }\n\n  addLanguageGeocodingOptions(searchParams, options);\n}\n\nfunction addForwardGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: GeocodingOptions,\n) {\n  addCommonForwardAndReverseGeocodingOptions(searchParams, options);\n\n  const { bbox, proximity, country, fuzzyMatch, autocomplete } = options;\n\n  if (bbox !== undefined) {\n    searchParams.set(\"bbox\", bbox.join(\",\"));\n  }\n\n  if (proximity !== undefined) {\n    searchParams.set(\n      \"proximity\",\n      proximity === \"ip\" ? proximity : proximity.join(\",\"),\n    );\n  }\n\n  if (country !== undefined) {\n    searchParams.set(\"country\", country.join(\",\"));\n  }\n\n  if (fuzzyMatch !== undefined) {\n    searchParams.set(\"fuzzyMatch\", fuzzyMatch ? \"true\" : \"false\");\n  }\n\n  if (autocomplete !== undefined) {\n    searchParams.set(\"autocomplete\", autocomplete ? \"true\" : \"false\");\n  }\n}\n\n/**\n * Performs a forward geocoding query to MapTiler API.\n * Providing a human readable place name (of a city, country, street, etc.), the function returns\n * a list of candidate locations including longitude and latitude.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-name-forward\n *\n * @param query\n * @param options\n * @returns\n */\nasync function forward(\n  query: string,\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${encodeURIComponent(query)}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addForwardGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a reverse geocoding query to MapTiler API.\n * Providing a longitude and latitude, this function returns a set of human readable information about this place (country, city, street, etc.)\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-coordinates-reverse\n *\n * @param position\n * @param options\n * @returns\n */\nasync function reverse(\n  position: Position,\n  options: ReverseGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (!Array.isArray(position) || position.length < 2) {\n    throw new Error(\"The position must be an array of form [lng, lat].\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${position[0]},${position[1]}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addCommonForwardAndReverseGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a geocoding query to MapTiler API to obtain fature by its ID.\n * Providing a feature ID, this function returns a feature which includes its full geometry.\n * Note that the feature ID is not stable and it changes when the database is re-indexed.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-feature-id\n *\n * @param id\n * @param options\n * @returns\n */\nasync function byId(\n  id: string,\n  options: ByIdGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  const endpoint = new URL(`geocoding/${id}.json`, defaults.maptilerApiURL);\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  addLanguageGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  return await res.json();\n}\n\n/**\n * Perform a batch geocoding query to MapTiler API.\n * Provide multiple queries in the array. Each query can be forward, reverse or by feature ID.\n *\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#batch-geocoding\n *\n * @param queries\n * @param options\n * @returns\n */\nasync function batch(\n  queries: string[],\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult[]> {\n  if (!queries.length) {\n    return [];\n  }\n\n  const joinedQuery = queries\n    .map((query) => encodeURIComponent(query))\n    .join(\";\");\n\n  const endpoint = new URL(\n    `geocoding/${joinedQuery}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addForwardGeocodingOptions(endpoint.searchParams, options);\n\n  const res = await callFetch(endpoint.toString());\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj = await res.json();\n\n  return queries.length === 1 ? [obj] : obj;\n}\n\n/**\n * The **geocoding** namespace contains asynchronous functions to call the [MapTiler Geocoding API](https://docs.maptiler.com/cloud/api/geocoding/).\n * The **Geocoding API** provides ways to get geographic coordinates from a human-readable search query of a place (forward geocoding)\n * and to get the location details (country, city, street, etc.) from a geographic coordinate (reverse geocoding);\n */\nconst geocoding = {\n  forward,\n  reverse,\n  byId,\n  batch,\n};\n\nexport { geocoding };\n","import { BBox } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GeolocationInfoOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Include elevation (in meters) in the results.\n   * Default: `false`\n   */\n  elevation?: boolean;\n};\n\nexport type GeolocationResult = {\n  /**\n   * Name of the country\n   * Example: Switzerland\n   */\n  country?: string;\n\n  /**\n   * Two-letter code of the country ISO 3166-1 alpha-2 codes\n   * Example: CH\n   */\n  country_code?: string;\n\n  /**\n   * Bounds of the country in WGS84 degrees [west, south, east, north].\n   * Example: [5.95538,45.818852,10.490936,47.809357]\n   */\n  country_bounds?: BBox;\n\n  /**\n   * Official country languages in ISO 639-1 format. ISO 639-1 codes\n   * Example: [\"de\",\"fr\",\"it\"]\n   */\n  country_languages?: Array<string>;\n\n  /**\n   * Name of the continent\n   * Example: Europe\n   */\n  continent?: string;\n\n  /**\n   * Two-letter code of the continent\n   * Example: EU\n   */\n  continent_code?: string;\n\n  /**\n   * Indicated whether the country is part of the European Union.\n   */\n  eu?: boolean;\n\n  /**\n   * Name of the city\n   * Example: Zurich\n   */\n  city?: string;\n\n  /**\n   * Latitude of the location\n   * Example: 47.36667\n   */\n  latitude?: number;\n\n  /**\n   * Longitude of the location\n   * Example: 8.55\n   */\n  longitude?: number;\n\n  /**\n   * Postal code\n   * Example: 8000\n   */\n  postal?: string;\n\n  /**\n   * If known, the ISO 3166-2 name for the first level region. ISO 3166-2 codes\n   * Example: Zurich\n   */\n  region?: string;\n\n  /**\n   * If known, the ISO 3166-2 code for the first level region. ISO 3166-2 codes\n   * Example: ZH\n   */\n  region_code?: string;\n\n  /**\n   * Name of the timezone\n   * Example: Europe/Zurich\n   */\n  timezone?: string;\n\n  /**\n   * Elevation of the location in meters\n   * Example: 433\n   */\n  elevation?: number;\n};\n\n/**\n * Looks up geolocation details from IP address using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geolocation/#ip-geolocation\n * @returns\n */\nasync function info(\n  options: GeolocationInfoOptions = {},\n): Promise<GeolocationResult> {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"elevation\" in options) {\n    endpoint.searchParams.set(\n      \"elevation\",\n      options.elevation ? \"true\" : \"false\",\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as GeolocationResult;\n}\n\n/**\n * The **geolocation** namespace contains an asynchronous function to call the [MapTiler Geolocation API](https://docs.maptiler.com/cloud/api/geolocation/).\n * The **Geolocation API** provides a way to retrieve the IP address as well as geographic informations of a machine performing the query (most likely: a user)\n */\nconst geolocation = {\n  info,\n};\n\nexport { geolocation };\n","import { BBox, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type CoordinatesSearchOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number;\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean;\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean;\n};\n\nexport type CoordinateId = {\n  authority: string;\n  code: BigInteger;\n};\n\nexport type CoordinateExport = {\n  proj4: string;\n  wkt: string;\n};\n\nexport type CoordinateGrid = {\n  path: string;\n};\n\nexport type CoordinateTransformation = {\n  id: CoordinateId;\n  name: string;\n  reversible: boolean;\n  usable: boolean;\n  deprecated: boolean;\n  grids: Array<CoordinateGrid>;\n  accuracy?: number;\n  area?: string;\n  bbox?: BBox;\n  target_crs?: CoordinateId;\n  unit?: string;\n};\n\nexport type CoordinateSearch = {\n  id: CoordinateId;\n\n  name: string;\n\n  kind: string;\n\n  deprecated: boolean;\n\n  transformations?: Array<CoordinateTransformation | number>;\n\n  accuracy?: number;\n\n  unit?: string;\n\n  area?: string;\n\n  /**\n   * Bounding box of the resource in [min_lon, min_lat, max_lon, max_lat] order.\n   */\n  bbox?: BBox;\n\n  /**\n   * Most suitable transformation for this CRS.\n   */\n  default_transformation?: DefaultTransformation;\n\n  exports: CoordinateExport;\n};\n\nexport type DefaultTransformation = {\n  authority: string;\n  code: number;\n};\n\nexport type CoordinateSearchResult = {\n  /**\n   * The coordinate search results\n   */\n  results: Array<CoordinateSearch>;\n\n  /**\n   * The number of results\n   */\n  total: number;\n};\n\n/**\n * Search information about coordinate systems using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#search-coordinate-systems\n * @param query Can be any kind of CRS by name or code\n * @param options\n * @returns\n */\nasync function search(\n  query: string,\n  options: CoordinatesSearchOptions = {},\n): Promise<CoordinateSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `coordinates/search/${query}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\n      \"transformations\",\n      options.transformations.toString(),\n    );\n  }\n\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateSearchResult;\n}\n\nexport type XYZ = {\n  x?: number;\n  y?: number;\n  z?: number;\n};\n\nexport type CoordinateTransformResult = {\n  results: Array<XYZ>;\n\n  /**\n   * Transformations are selected using given ops parameter.\n   * If no parameter is given, auto strategy is used.\n   * If given, it may try to use a listed transformation,\n   * then fallback to towgs84 patching, and finally boundcrs.\n   */\n  transformer_selection_strategy: string;\n};\n\n/**\n * Options that can be provided when transforming a coordinate from one CRS to another.\n */\nexport type CoordinatesTransformOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number;\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number;\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>;\n};\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#transform-coordinates\n * @param positions\n * @param options\n * @returns\n */\nasync function transform(\n  positions: Position | Array<Position>,\n  options: CoordinatesTransformOptions = {},\n): Promise<CoordinateTransformResult> {\n  const coordinatesStr = (Array.isArray(positions[0]) ? positions : [positions])\n    .map((coord) => `${coord[0]},${coord[1]}`)\n    .join(\";\");\n\n  const endpoint = new URL(\n    `coordinates/transform/${coordinatesStr}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\n      \"ops\",\n      (Array.isArray(options.operations)\n        ? options.operations\n        : [options.operations]\n      ).join(\"|\"),\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateTransformResult;\n}\n\n/**\n * The **coordinate** namespace contains asynchronous functions to call the [MapTiler Coordinate API](https://docs.maptiler.com/cloud/api/coordinates/).\n * The goal of the **Coordinate API* is query information about spatial coordinate reference system (CRS) as well as to transform coordinates from one CRS to another.\n */\nconst coordinates = {\n  search,\n  transform,\n};\n\nexport { coordinates };\n","import { FeatureCollection } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GetDataOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/data/#geojson\n * @param dataId\n * @returns\n */\nasync function get(\n  dataId: string,\n  options: GetDataOptions = {},\n): Promise<FeatureCollection> {\n  if (typeof dataId !== \"string\" || dataId.trim().length === 0) {\n    throw new Error(\"The data ID must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `data/${encodeURIComponent(dataId)}/features.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n/**\n * The **data** namespace contains an asynchronous function to call the [MapTiler Data API](https://docs.maptiler.com/cloud/api/data/).\n * The **Data API** provides a way to retrieve user data in GeoJSON format.\n */\nconst data = {\n  get,\n};\n\nexport { data };\n","/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    // The style could also possibly just be the name of the style without any URI style\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n\n  return expandedStyle;\n}\n\n/**\n * Type for object containing style details\n */\nexport type MapStylePreset = {\n  referenceStyleID: string;\n  name: string;\n  description: string;\n  variants: Array<{\n    deprecated?: boolean;\n    id: string;\n    name: string;\n    variantType: string;\n    description: string;\n    imageURL: string;\n  }>;\n};\n\n/**\n * An instance of MapStyleVariant contains information about a style to use that belong to a reference style\n */\nexport class MapStyleVariant {\n  constructor(\n    /**\n     * Human-friendly name\n     */\n    private name: string,\n\n    /**\n     * Variant name the variant is addressed to from its reference style: `MapStyle.REFERNCE_STYLE_NAME.VARIANT_TYPE`\n     */\n    private variantType: string,\n\n    /**\n     * MapTiler Cloud id\n     */\n    private id: string,\n\n    /**\n     * Reference map style, used to retrieve sibling variants\n     */\n    private referenceStyle: ReferenceMapStyle,\n\n    /**\n     * Human-friendly description\n     */\n    private description: string,\n\n    /**\n     * URL to an image describing the style variant\n     */\n    private imageURL: string,\n\n    /**\n     * Whether this variant is deprecated or not\n     */\n    public deprecated: boolean = false,\n  ) {}\n\n  /**\n   * Get the human-friendly name\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  getFullName(): string {\n    return `${this.referenceStyle.getName()} ${this.name}`;\n  }\n\n  /**\n   * Get the variant type (eg. \"DEFAULT\", \"DARK\", \"PASTEL\", etc.)\n   * @returns\n   */\n  getType(): string {\n    return this.variantType;\n  }\n\n  /**\n   * Get the MapTiler Cloud id\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Get the human-friendly description\n   */\n  getDescription(): string {\n    return this.description;\n  }\n\n  /**\n   * Get the reference style this variant belongs to\n   * @returns\n   */\n  getReferenceStyle(): ReferenceMapStyle {\n    return this.referenceStyle;\n  }\n\n  /**\n   * Check if a variant of a given type exists for _this_ variants\n   * (eg. if this is a \"DARK\", then we can check if there is a \"LIGHT\" variant of it)\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return this.referenceStyle.hasVariant(variantType);\n  }\n\n  /**\n   * Retrieve the variant of a given type. If not found, will return the \"DEFAULT\" variant.\n   * (eg. _this_ \"DARK\" variant does not have any \"PASTEL\" variant, then the \"DEFAULT\" is returned)\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    const variant = this.referenceStyle.getVariant(variantType);\n    this.warnIfDeprecated(variant);\n    return variant;\n  }\n\n  /**\n   * Get all the variants for _this_ variants, except _this_ current one\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return this.referenceStyle\n      .getVariants()\n      .filter((v) => v !== this)\n      .map((v) => {\n        this.warnIfDeprecated(v);\n        return v;\n      });\n  }\n\n  /**\n   * Get the image URL that represent _this_ variant\n   * @returns\n   */\n  getImageURL(): string {\n    return this.imageURL;\n  }\n\n  /**\n   * Get the style as usable by MapLibre, a string (URL) or a plain style description (StyleSpecification)\n   * @returns\n   */\n  getExpandedStyleURL(): string {\n    return expandMapStyle(this.getId());\n  }\n\n  warnIfDeprecated(variant: MapStyleVariant = this): MapStyleVariant {\n    if (!variant.deprecated) return variant;\n\n    const name = variant.getFullName();\n\n    console.warn(\n      `Style \"${name}\" is deprecated and will be removed in a future version.`,\n    );\n\n    return variant;\n  }\n}\n\n/**\n * An instance of reference style contains a list of StyleVariants ordered by relevance\n */\nexport class ReferenceMapStyle {\n  /**\n   * Variants that belong to this reference style, key being the reference type\n   */\n  private variants: { [key: string]: MapStyleVariant } = {};\n\n  /**\n   * Variants that belong to this reference style, ordered by relevance\n   */\n  private orderedVariants: Array<MapStyleVariant> = [];\n\n  constructor(\n    /**\n     * Human-friendly name of this reference style\n     */\n    private name: string,\n\n    /**\n     * ID of this reference style\n     */\n    private id: string,\n  ) {}\n\n  /**\n   * Get the human-friendly name of this reference style\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Get the id of _this_ reference style\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Add a variant to _this_ reference style\n   * @param v\n   */\n  addVariant(v: MapStyleVariant) {\n    this.variants[v.getType()] = v;\n    this.orderedVariants.push(v);\n  }\n\n  /**\n   * Check if a given variant type exists for this reference style\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return variantType in this.variants;\n  }\n\n  /**\n   * Get a given variant. If the given type of variant does not exist for this reference style,\n   * then the most relevant default variant is returned instead\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return variantType in this.variants\n      ? this.variants[variantType]\n      : this.orderedVariants[0];\n  }\n\n  /**\n   * Get the list of variants for this reference style\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return Object.values(this.variants);\n  }\n\n  /**\n   * Get the defualt variant for this reference style\n   * @returns\n   */\n  getDefaultVariant(): MapStyleVariant {\n    return this.orderedVariants[0].warnIfDeprecated();\n  }\n}\n\n/**\n * All the styles and variants maintained by MapTiler.\n */\nexport type MapStyleType = {\n  /**\n   * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings\n   */\n  STREETS: ReferenceMapStyle & {\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in dark mode.\n     */\n    DARK: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in light mode.\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in blue night mode.\n     */\n    NIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, with a pastel color palette.\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Suitable for outdoor activities. With elevation isolines and hillshading.\n   */\n  OUTDOOR: ReferenceMapStyle & {\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n   */\n  WINTER: ReferenceMapStyle & {\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery only, without any label.\n   */\n  SATELLITE: ReferenceMapStyle & {\n    /**\n     * High resolution imagery only, without any label.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery with labels, political borders and roads.\n   */\n  HYBRID: ReferenceMapStyle & {\n    /**\n     * High resolution imagery with labels, political borders and roads.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A minimalist street-oriented style without POI\n   */\n  BASIC: ReferenceMapStyle & {\n    /**\n     * A minimalist street-oriented style without POI\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * A bright street-oriented style, a nice alternative to `streets`\n   */\n  BRIGHT: ReferenceMapStyle & {\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, with a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Classic OpenStreetMap style\n   */\n  OPENSTREETMAP: ReferenceMapStyle & {\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n   */\n  TOPO: ReferenceMapStyle & {\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice high-contrast, and high saturation alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    SHINY: MapStyleVariant;\n    /**\n     * A nice low-contrast, alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, using a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n\n    /**\n     * A nice very high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    TOPOGRAPHIQUE: MapStyleVariant;\n  };\n\n  /**\n   * A nice alternative to `streets` with a soft color palette\n   */\n  VOYAGER: ReferenceMapStyle & {\n    /**\n     * A nice alternative to `streets` with a soft color palette\n     *\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in very dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets` with a soft sepia color palette and vintage look\n     */\n    VINTAGE: MapStyleVariant;\n  };\n\n  /**\n   * A bold very high contrast black and white (no gray!) style for the city\n   */\n  TONER: ReferenceMapStyle & {\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, without any label\n     */\n    BACKGROUND: MapStyleVariant;\n    /**\n     * A bold very high contrast, yet faded, style for the city\n     */\n    LITE: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, with no building, only roads!\n     */\n    LINES: MapStyleVariant;\n  };\n\n  /**\n   * Minimalist style, perfect for data visualization\n   */\n  DATAVIZ: ReferenceMapStyle & {\n    /**\n     *  Minimalist style, perfect for data visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in dark mode\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * Explore deep see trenches and mountains, with isolines and depth labels\n   */\n  OCEAN: ReferenceMapStyle & {\n    /**\n     * Explore deep see trenches and mountains, with isolines and depth labels\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n   */\n  BACKDROP: ReferenceMapStyle & {\n    /**\n     *  Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Dark greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Light greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  LANDSCAPE: ReferenceMapStyle & {\n    /**\n     *  Light terrain map for data overlays and visualisations\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     *  Dark terrain map for data overlays and visualisations\n     */\n    DARK: MapStyleVariant;\n    /**\n     *  Vivid terrain map for data overlays and visualisations\n     */\n    VIVID: MapStyleVariant;\n  };\n  /**\n   *  Watercolor map for creative use\n   */\n  AQUARELLE: ReferenceMapStyle & {\n    /**\n     *  Watercolor map for creative use\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     *  Dark watercolor map for creative use\n     */\n    DARK: MapStyleVariant;\n    /**\n     *  Vivid watercolor map for creative use\n     */\n    VIVID: MapStyleVariant;\n  };\n};\n\nexport const mapStylePresetList: Array<MapStylePreset> = [\n  {\n    referenceStyleID: \"STREETS\",\n    name: \"Streets\",\n    description: \"\",\n    variants: [\n      {\n        id: \"streets-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-night\",\n        name: \"Night\",\n        variantType: \"NIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OUTDOOR\",\n    name: \"Outdoor\",\n    description: \"\",\n    variants: [\n      {\n        id: \"outdoor-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"outdoor-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"WINTER\",\n    name: \"Winter\",\n    description: \"\",\n    variants: [\n      {\n        id: \"winter-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"winter-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"SATELLITE\",\n    name: \"Satellite\",\n    description: \"\",\n    variants: [\n      {\n        id: \"satellite\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"HYBRID\",\n    name: \"Hybrid\",\n    description: \"\",\n    variants: [\n      {\n        id: \"hybrid\",\n        deprecated: true,\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BASIC\",\n    name: \"Basic\",\n    description: \"\",\n    variants: [\n      {\n        id: \"basic-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BRIGHT\",\n    name: \"Bright\",\n    description: \"\",\n    variants: [\n      {\n        id: \"bright-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OPENSTREETMAP\",\n    name: \"OpenStreetMap\",\n    description: \"\",\n    variants: [\n      {\n        id: \"openstreetmap\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"TOPO\",\n    name: \"Topo\",\n    description: \"\",\n    variants: [\n      {\n        id: \"topo-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-shiny\",\n        name: \"Shiny\",\n        deprecated: true,\n        variantType: \"SHINY\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-topographique\",\n        name: \"Topographique\",\n        variantType: \"TOPOGRAPHIQUE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"VOYAGER\",\n    name: \"Voyager\",\n    description: \"\",\n    variants: [\n      {\n        id: \"voyager-v2\",\n        name: \"Default\",\n        deprecated: true,\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-darkmatter\",\n        name: \"Darkmatter\",\n        deprecated: true,\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-positron\",\n        name: \"Positron\",\n        deprecated: true,\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-vintage\",\n        name: \"Vintage\",\n        deprecated: true,\n        variantType: \"VINTAGE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TONER\",\n    name: \"Toner\",\n    description: \"\",\n    variants: [\n      {\n        id: \"toner-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-background\",\n        name: \"Background\",\n        variantType: \"BACKGROUND\",\n        deprecated: true,\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lite\",\n        name: \"Lite\",\n        variantType: \"LITE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lines\",\n        name: \"Lines\",\n        variantType: \"LINES\",\n        deprecated: true,\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"DATAVIZ\",\n    name: \"Dataviz\",\n    description: \"\",\n    variants: [\n      {\n        id: \"dataviz\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BACKDROP\",\n    name: \"Backdrop\",\n    description: \"\",\n    variants: [\n      {\n        id: \"backdrop\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OCEAN\",\n    name: \"Ocean\",\n    description: \"\",\n    variants: [\n      {\n        id: \"ocean\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"AQUARELLE\",\n    name: \"Aquarelle\",\n    description: \"Watercolor map for creative use\",\n    variants: [\n      {\n        id: \"aquarelle\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"aquarelle-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"aquarelle-vivid\",\n        name: \"Vivid\",\n        variantType: \"VIVID\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n  {\n    referenceStyleID: \"LANDSCAPE\",\n    name: \"Landscape\",\n    description: \"Terrain map for data overlays and visualisations\",\n    variants: [\n      {\n        id: \"landscape\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"landscape-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"landscape-vivid\",\n        name: \"Vivid\",\n        variantType: \"VIVID\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n];\n\nfunction makeReferenceStyleProxy(referenceStyle: ReferenceMapStyle) {\n  return new Proxy(referenceStyle, {\n    get(target, prop, receiver) {\n      if (target.hasVariant(prop as string)) {\n        return target.getVariant(prop as string);\n      }\n\n      // This variant does not exist for this style, but since it's full uppercase\n      // we guess that the dev tries to access a style variant. So instead of\n      // returning the default (STREETS.DEFAULT), we return the non-variant of the current style\n      if (prop.toString().toUpperCase() === (prop as string)) {\n        return referenceStyle.getDefaultVariant();\n      }\n\n      const style = Reflect.get(target, prop, receiver);\n\n      return style;\n    },\n  });\n}\n\nfunction buildMapStyles(): MapStyleType {\n  const mapStyle = {};\n\n  for (let i = 0; i < mapStylePresetList.length; i += 1) {\n    const refStyleInfo = mapStylePresetList[i];\n\n    const refStyle = makeReferenceStyleProxy(\n      new ReferenceMapStyle(refStyleInfo.name, refStyleInfo.referenceStyleID),\n    );\n\n    for (let j = 0; j < refStyleInfo.variants.length; j += 1) {\n      const variantInfo = refStyleInfo.variants[j];\n      const variant = new MapStyleVariant(\n        variantInfo.name, // name\n        variantInfo.variantType, // variantType\n        variantInfo.id, // id\n        refStyle, // referenceStyle\n        variantInfo.description,\n        variantInfo.imageURL, // imageURL\n        variantInfo.deprecated, // deprecated\n      );\n\n      refStyle.addVariant(variant);\n    }\n    mapStyle[refStyleInfo.referenceStyleID] = refStyle;\n  }\n  return mapStyle as MapStyleType;\n}\n\nexport function styleToStyle(\n  style: string | ReferenceMapStyle | MapStyleVariant | null | undefined,\n): string {\n  if (!style) {\n    return MapStyle[mapStylePresetList[0].referenceStyleID]\n      .getDefaultVariant()\n      .getId();\n  }\n\n  // If the provided style is a shorthand (eg. \"streets-v2\") then we make sure it's trimmed and lowercase\n  if (typeof style === \"string\" || style instanceof String) {\n    return style.trim().toLowerCase();\n  }\n\n  if (style instanceof MapStyleVariant) {\n    return style.getId();\n  }\n\n  if (style instanceof ReferenceMapStyle) {\n    return style.getDefaultVariant().getId();\n  }\n}\n\n/**\n * Contains all the reference map style created by MapTiler team as well as all the variants.\n * For example, `MapStyle.STREETS` and the variants:\n * - `MapStyle.STREETS.DARK`\n * - `MapStyle.STREETS.LIGHT`\n * - `MapStyle.STREETS.PASTEL`\n *\n */\nexport const MapStyle: MapStyleType = buildMapStyles();\n","import {\n  GeoJsonObject,\n  GeometryObject,\n  LineString,\n  MultiLineString,\n  Feature,\n  FeatureCollection,\n  Position,\n} from \"geojson\";\n\n/**\n * From a generic GeoJSON object extract thepossibly nested LineString and MultiLineString features\n * it contains. The result is a flat array made of LineString and MultiLineString.\n */\nfunction extractLineStrings(\n  geoJson: GeoJsonObject,\n): Array<LineString | MultiLineString> {\n  const lineStrings: Array<LineString | MultiLineString> = [];\n\n  function extractFromGeometry(geometry: GeometryObject) {\n    if (geometry.type === \"LineString\" || geometry.type === \"MultiLineString\") {\n      lineStrings.push(geometry as LineString | MultiLineString);\n    }\n  }\n\n  function extractFromFeature(feature: Feature) {\n    if (feature.geometry) {\n      extractFromGeometry(feature.geometry);\n    }\n  }\n\n  function extractFromFeatureCollection(collection: FeatureCollection) {\n    for (const feature of collection.features) {\n      if (feature.type === \"Feature\") {\n        extractFromFeature(feature);\n      } else if (feature.type === \"FeatureCollection\") {\n        extractFromFeatureCollection(feature as unknown as FeatureCollection); // had to add unknown\n      }\n    }\n  }\n\n  if (geoJson.type === \"Feature\") {\n    extractFromFeature(geoJson as Feature);\n  } else if (geoJson.type === \"FeatureCollection\") {\n    extractFromFeatureCollection(geoJson as FeatureCollection);\n  } else {\n    // It's a single geometry\n    extractFromGeometry(geoJson as GeometryObject);\n  }\n\n  return lineStrings;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Position, p1: Position, p2: Position): number {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(\n  points: Array<Position>,\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Array<Position>,\n) {\n  let maxSqDist = sqTolerance,\n    index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(\n  points: Array<Position>,\n  sqTolerance: number,\n): Array<Position> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n/**\n * Simplify a path made of a list of GeoJSON Positions, with a tolerance.\n */\nfunction simplify(points: Array<Position>, tolerance: number): Array<Position> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\n\nexport const misc = {\n  extractLineStrings,\n  simplify,\n};\n","import { BBox, Position } from \"geojson\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { MapStyleVariant, ReferenceMapStyle, styleToStyle } from \"../mapstyle\";\nimport { misc } from \"../misc\";\n\n/**\n * Base set of options that can be provided to all the types of static maps\n */\nexport type StaticMapBaseOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Style of the map (not full style URL). Example: \"winter\", \"streets-v2\".\n   * Default: `\"streets-v2\"`\n   */\n  style?: string | ReferenceMapStyle | MapStyleVariant;\n\n  /**\n   * Double the size of the static map image to support hiDPI/Retina monitors.\n   * Default: `false`\n   */\n  hiDPI?: boolean;\n\n  /**\n   * Image format.\n   * Default: `\"png\"`\n   */\n  format?: \"png\" | \"jpg\" | \"webp\";\n\n  /**\n   * Width of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  width?: number;\n\n  /**\n   * Height of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  height?: number;\n\n  /**\n   * Placement of the attribution. Can also be set to `false` to not show attribution.\n   * Default: `\"bottomright\"`\n   */\n  attribution?: \"bottomright\" | \"bottomleft\" | \"topleft\" | \"topright\" | false;\n\n  /**\n   * A marker or list of markers to show on the map\n   * Default: none provided\n   */\n  markers?: StaticMapMarker | Array<StaticMapMarker>;\n\n  /**\n   * URL of the marker image. Applies only if one or multiple markers positions are provided.\n   * Default: none provided\n   */\n  markerIcon?: string;\n\n  /**\n   * Position of the marker regarding its coordinates. Applies only:\n   * - with a custom icon provided with `markerIcon`\n   * - if one or multiple markers positions are provided.\n   * Default: `\"bottom\"`\n   */\n  markerAnchor?:\n    | \"top\"\n    | \"left\"\n    | \"bottom\"\n    | \"right\"\n    | \"center\"\n    | \"topleft\"\n    | \"bottomleft\"\n    | \"topright\"\n    | \"bottomright\";\n\n  /**\n   * Draw a path or polygon on top of the map. If the path is too long it will be simplified, yet remaining accurate.\n   * Default: none provided\n   */\n  path?: Array<Position>;\n\n  /**\n   * Color of the path line. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: `\"blue\"`\n   */\n  pathStrokeColor?: string;\n\n  /**\n   * Color of the filling, also works if the polygon is not closed. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: none (transparent filling)\n   */\n  pathFillColor?: string;\n\n  /**\n   * Width of the path line in pixel. It can be floating point precision (ex: `0.5`)\n   * Default: `1` if `hiDPI` is `false` and `2` if `hiDPI` is `true`.\n   */\n  pathWidth?: number;\n};\n\n/**\n * Options that can be provided to centered static maps\n */\nexport type CenteredStaticMapOptions = StaticMapBaseOptions;\n\n/**\n * Options that can be provided to bounded static maps\n */\nexport type BoundedStaticMapOptions = StaticMapBaseOptions & {\n  /**\n   * Extra space added around the regio of interest, in percentage.\n   * Default: `0.1` (for 10%)\n   */\n  padding?: number;\n};\n\n/**\n * Options that can be provided to automatic static maps\n */\nexport type AutomaticStaticMapOptions = BoundedStaticMapOptions;\n\n/**\n * Definition of a maker to show on a static map\n */\nexport type StaticMapMarker = [\n  /**\n   * Longitude of the marker\n   */\n  number,\n  /**\n   * latitude of the marker\n   */\n  number,\n  /**\n   * Color of the marker with CSS syntax. Applies only if a custom `markerIcon` is not provided.\n   */\n  string,\n];\n\nfunction staticMapMarkerToString(\n  marker: StaticMapMarker,\n  includeColor = true,\n): string {\n  let str = `${marker[0]},${marker[1]}`;\n\n  if (marker.length === 3 && includeColor) {\n    str += `,${marker[2]}`;\n  }\n\n  return str;\n}\n\nfunction simplifyAndStringify(path: Array<Position>, maxNbChar = 3000): string {\n  let str = path.map((point) => point.join(\",\")).join(\"|\");\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while (str.length > maxNbChar) {\n    const simplerPath = misc.simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map((point) => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param center\n * @param zoom\n * @param options\n * @returns\n */\nfunction centered(\n  center: Position,\n  zoom: number,\n  options: CenteredStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${center[0]},${\n      center[1]\n    },${zoom}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param boundingBox\n * @param options\n * @returns\n */\nfunction bounded(\n  boundingBox: BBox,\n  options: BoundedStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${boundingBox[0]},${\n      boundingBox[1]\n    },${boundingBox[2]},${boundingBox[3]}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param options\n * @returns\n */\nfunction automatic(options: AutomaticStaticMapOptions = {}): string {\n  if (!(\"markers\" in options) && !(\"path\" in options)) {\n    throw new Error(\n      \"Automatic static maps require markers and/or path to be created.\",\n    );\n  }\n\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(\n      style,\n    )}/static/auto/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * The **staticMaps** namespace contains an synchronous function build image URL of static map, as specified by the [MapTiler Static Map API](https://docs.maptiler.com/cloud/api/static-maps/).\n * The URL of static maps can then be used within a `<img />` markup element, as the `src` property value.\n */\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n};\n\nexport { staticMaps };\n","import { Position } from \"geojson\";\n\n/**\n * Average radius of Earth in meters\n */\nconst EARTH_RADIUS = 6371008.8;\n\n/**\n * Average circumfrence of Earth in meters\n */\nconst EARTH_CIRCUMFERENCE = 2 * Math.PI * EARTH_RADIUS;\n\n/**\n * Convert a wgs84 longitude to web Mercator X (west-east axis), where westmost X is 0 and eastmost X is 1.\n */\nfunction longitudeToMercatorX(lng: number): number {\n  return (180 + lng) / 360;\n}\n\n/**\n * Convert a wgs84 latitude to web Mercator Y (north-south axis), where northmost Y is 0 and southmost Y is 1.\n */\nfunction latitudeToMercatorY(lat: number): number {\n  return (\n    (180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) /\n    360\n  );\n}\n\n/**\n * Convert a wgs84 position into a web Mercator position where north-west is [0, 0] and south-east is [1, 1]\n */\nfunction wgs84ToMercator(position: Position): Position {\n  const wrappedPos = wrapWgs84(position);\n  return [\n    longitudeToMercatorX(wrappedPos[0]),\n    latitudeToMercatorY(wrappedPos[1]),\n  ];\n}\n\n/**\n * Converts a mercator X (west-east axis in [0, 1]) to wgs84 longitude\n */\nfunction mercatorXToLongitude(x: number): number {\n  return x * 360 - 180;\n}\n\n/**\n * Converts a mercator Y (north-south axis in [0, 1]) to wgs84 latitude\n */\nfunction mercatorYToLatitude(y: number): number {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\n/**\n * Converts a web Mercator position where north-west is [0, 0] and south-east is [1, 1] into a wgs84\n */\nfunction mercatorToWgs84(position: Position): Position {\n  return [mercatorXToLongitude(position[0]), mercatorYToLatitude(position[1])];\n}\n\n/**\n * Gives the distance in meters between two positions using the Haversine Formula.\n */\nfunction haversineDistanceWgs84(from: Position, to: Position): number {\n  const rad = Math.PI / 180;\n  const lat1 = from[1] * rad;\n  const lat2 = to[1] * rad;\n  const a =\n    Math.sin(lat1) * Math.sin(lat2) +\n    Math.cos(lat1) * Math.cos(lat2) * Math.cos((to[0] - from[0]) * rad);\n\n  const maxMeters = EARTH_RADIUS * Math.acos(Math.min(a, 1));\n  return maxMeters;\n}\n\n/**\n * Compute the cumulated distance for each position of an array of positions.\n * For I positions, there are I-1 distance, hence the distance at i corresponds\n * to the distance from the (i-1)th position to ith\n */\nfunction haversineCumulatedDistanceWgs84(positions: Position[]): number[] {\n  const cumulatedDistance = Array(positions.length);\n  cumulatedDistance[0] = 0;\n  const l = cumulatedDistance.length;\n\n  for (let i = 1; i < l; i++) {\n    cumulatedDistance[i] =\n      haversineDistanceWgs84(positions[i - 1], positions[i]) +\n      cumulatedDistance[i - 1];\n  }\n  return cumulatedDistance;\n}\n\n/**\n * Returns a position that has longitude in [-180, 180]\n */\nfunction wrapWgs84(position: Position): Position {\n  const lng = position[0];\n  const lat = position[1];\n\n  const d = 360;\n  const w = ((((lng + 180) % d) + d) % d) - 180;\n  const wrapLong = w === -180 ? 180 : w;\n\n  return [wrapLong, lat];\n}\n\n/*\n * The circumference at a line of latitude in meters.\n */\nexport function circumferenceAtLatitude(latitude: number) {\n  return EARTH_CIRCUMFERENCE * Math.cos((latitude * Math.PI) / 180);\n}\n\n/**\n * From a given mercator coordinate and a zoom level, computes the tile index\n */\nfunction mercatorToTileIndex(\n  /**\n   * Mercator coordinates (north-west is [0, 0], sourth-east is [1, 1])\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const numberOfTilePerAxis = 2 ** zoom;\n\n  const fIndex: Position = [\n    position[0] * numberOfTilePerAxis,\n    position[1] * numberOfTilePerAxis,\n  ];\n\n  return strict ? [~~fIndex[0], ~~fIndex[1]] : fIndex;\n}\n\n/**\n * From a given wgs84 coordinate and a zoom level, computes the tile index\n */\nfunction wgs84ToTileIndex(\n  /**\n   * Wgs84 coordinates\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const merc = wgs84ToMercator(position);\n  return mercatorToTileIndex(merc, zoom, strict);\n}\n\n/**\n * Converts a degree angle into a radian angle\n */\nfunction toRadians(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n\n/**\n * Converts a radian angle to a degree angle\n */\nfunction toDegrees(radians: number): number {\n  return (radians * 180) / Math.PI;\n}\n\n/**\n * Compute an intermediate point between two reference points using the Haversine formula.\n * If ratio is `0`, the returned position is pos1.\n * If ratio is `1`, the returned position is pos2.\n * If ratio is `0.5`, the returned position is halfway pos1 pos2 in distance.\n */\nfunction haversineIntermediateWgs84(\n  pos1: Position,\n  pos2: Position,\n  ratio: number,\n): Position {\n  const d = haversineDistanceWgs84(pos1, pos2);\n  const λ1 = toRadians(pos1[0]);\n  const φ1 = toRadians(pos1[1]);\n  const λ2 = toRadians(pos2[0]);\n  const φ2 = toRadians(pos2[1]);\n\n  const δ = d / EARTH_RADIUS; // Angular distance in radians\n  const a = Math.sin((1 - ratio) * δ) / Math.sin(δ);\n  const b = Math.sin(ratio * δ) / Math.sin(δ);\n  const x = a * Math.cos(φ1) * Math.cos(λ1) + b * Math.cos(φ2) * Math.cos(λ2);\n  const y = a * Math.cos(φ1) * Math.sin(λ1) + b * Math.cos(φ2) * Math.sin(λ2);\n  const z = a * Math.sin(φ1) + b * Math.sin(φ2);\n\n  const φ3 = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const λ3 = Math.atan2(y, x);\n\n  return [toDegrees(λ3), toDegrees(φ3)];\n}\n\nexport const math = {\n  EARTH_RADIUS,\n  EARTH_CIRCUMFERENCE,\n  longitudeToMercatorX,\n  latitudeToMercatorY,\n  wgs84ToMercator,\n  mercatorXToLongitude,\n  mercatorYToLatitude,\n  mercatorToWgs84,\n  haversineDistanceWgs84,\n  wrapWgs84,\n  circumferenceAtLatitude,\n  mercatorToTileIndex,\n  wgs84ToTileIndex,\n  toRadians,\n  toDegrees,\n  haversineIntermediateWgs84,\n  haversineCumulatedDistanceWgs84,\n};\n","export default class QuickLRU extends Map {\n\t#size = 0;\n\t#cache = new Map();\n\t#oldCache = new Map();\n\t#maxSize;\n\t#maxAge;\n\t#onEviction;\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\n\t\t}\n\n\t\tthis.#maxSize = options.maxSize;\n\t\tthis.#maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n\t\tthis.#onEviction = options.onEviction;\n\t}\n\n\t// For tests.\n\tget __oldCache() {\n\t\treturn this.#oldCache;\n\t}\n\n\t#emitEvictions(cache) {\n\t\tif (typeof this.#onEviction !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, item] of cache) {\n\t\t\tthis.#onEviction(key, item.value);\n\t\t}\n\t}\n\n\t#deleteIfExpired(key, item) {\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n\t\t\tif (typeof this.#onEviction === 'function') {\n\t\t\t\tthis.#onEviction(key, item.value);\n\t\t\t}\n\n\t\t\treturn this.delete(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t#getOrDeleteIfExpired(key, item) {\n\t\tconst deleted = this.#deleteIfExpired(key, item);\n\t\tif (deleted === false) {\n\t\t\treturn item.value;\n\t\t}\n\t}\n\n\t#getItemValue(key, item) {\n\t\treturn item.expiry ? this.#getOrDeleteIfExpired(key, item) : item.value;\n\t}\n\n\t#peek(key, cache) {\n\t\tconst item = cache.get(key);\n\n\t\treturn this.#getItemValue(key, item);\n\t}\n\n\t#set(key, value) {\n\t\tthis.#cache.set(key, value);\n\t\tthis.#size++;\n\n\t\tif (this.#size >= this.#maxSize) {\n\t\t\tthis.#size = 0;\n\t\t\tthis.#emitEvictions(this.#oldCache);\n\t\t\tthis.#oldCache = this.#cache;\n\t\t\tthis.#cache = new Map();\n\t\t}\n\t}\n\n\t#moveToRecent(key, item) {\n\t\tthis.#oldCache.delete(key);\n\t\tthis.#set(key, item);\n\t}\n\n\t* #entriesAscending() {\n\t\tfor (const item of this.#oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.#cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\tconst item = this.#cache.get(key);\n\t\t\treturn this.#getItemValue(key, item);\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\tconst item = this.#oldCache.get(key);\n\t\t\tif (this.#deleteIfExpired(key, item) === false) {\n\t\t\t\tthis.#moveToRecent(key, item);\n\t\t\t\treturn item.value;\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key, value, {maxAge = this.#maxAge} = {}) {\n\t\tconst expiry = typeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY\n\t\t\t? (Date.now() + maxAge)\n\t\t\t: undefined;\n\n\t\tif (this.#cache.has(key)) {\n\t\t\tthis.#cache.set(key, {\n\t\t\t\tvalue,\n\t\t\t\texpiry,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.#set(key, {value, expiry});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\treturn !this.#deleteIfExpired(key, this.#cache.get(key));\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\treturn !this.#deleteIfExpired(key, this.#oldCache.get(key));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpeek(key) {\n\t\tif (this.#cache.has(key)) {\n\t\t\treturn this.#peek(key, this.#cache);\n\t\t}\n\n\t\tif (this.#oldCache.has(key)) {\n\t\t\treturn this.#peek(key, this.#oldCache);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.#cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis.#size--;\n\t\t}\n\n\t\treturn this.#oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.#cache.clear();\n\t\tthis.#oldCache.clear();\n\t\tthis.#size = 0;\n\t}\n\n\tresize(newSize) {\n\t\tif (!(newSize && newSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tconst items = [...this.#entriesAscending()];\n\t\tconst removeCount = items.length - newSize;\n\t\tif (removeCount < 0) {\n\t\t\tthis.#cache = new Map(items);\n\t\t\tthis.#oldCache = new Map();\n\t\t\tthis.#size = items.length;\n\t\t} else {\n\t\t\tif (removeCount > 0) {\n\t\t\t\tthis.#emitEvictions(items.slice(0, removeCount));\n\t\t\t}\n\n\t\t\tthis.#oldCache = new Map(items.slice(removeCount));\n\t\t\tthis.#cache = new Map();\n\t\t\tthis.#size = 0;\n\t\t}\n\n\t\tthis.#maxSize = newSize;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.#cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.#oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesDescending() {\n\t\tlet items = [...this.#cache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\titems = [...this.#oldCache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\tconst deleted = this.#deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesAscending() {\n\t\tfor (const [key, value] of this.#entriesAscending()) {\n\t\t\tyield [key, value.value];\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (!this.#size) {\n\t\t\treturn this.#oldCache.size;\n\t\t}\n\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.#oldCache.keys()) {\n\t\t\tif (!this.#cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this.#size + oldCacheSize, this.#maxSize);\n\t}\n\n\tget maxSize() {\n\t\treturn this.#maxSize;\n\t}\n\n\tentries() {\n\t\treturn this.entriesAscending();\n\t}\n\n\tforEach(callbackFunction, thisArgument = this) {\n\t\tfor (const [key, value] of this.entriesAscending()) {\n\t\t\tcallbackFunction.call(thisArgument, value, key, this);\n\t\t}\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn JSON.stringify([...this.entriesAscending()]);\n\t}\n}\n","import QuickLRU from \"quick-lru\";\nimport { config } from \"./config\";\n\n/**\n * Informations about an image\n */\nexport type PixelData = {\n  /**\n   * The array of pixels as RGBRGB or RGBARGBA in a row-major order\n   */\n  pixels: Uint8ClampedArray | Uint8Array;\n  /**\n   * Width of the image in number of pixels\n   */\n  width: number;\n  /**\n   * Height of the image in number of pixels\n   */\n  height: number;\n  /**\n   * Number of components per pixel (3 if image is RGB, 4 if image is RGBA)\n   */\n  components: number;\n};\n\n/**\n * Type for the function that decodes an image file ArrayBuffer into valid pixel data\n */\nexport type BufferToPixelDataFunction = (ArrayBuffer) => Promise<PixelData>;\n\n/**\n * Main properties necessary from a TileJSON\n */\nexport type TileJSON = {\n  scale: string;\n  format: string;\n  maxzoom: number;\n  minzoom: number;\n  profile: string;\n  description: string;\n  attribution: string;\n  bounds: [number, number, number, number];\n  center: [number, number, number];\n\n  /**\n   * TileJSON version\n   */\n  tilejson: string;\n  name: string;\n  crs: string;\n  crs_wkt: string;\n  extent: [number, number, number, number];\n  tiles: string[];\n};\n\n// The LRU cache for storing tile PixelData\nlet tileCache = null;\n\n/**\n * Singleton-like function to access the tile cache\n */\nexport function getTileCache(): QuickLRU<string, PixelData> {\n  if (!tileCache) {\n    tileCache = new QuickLRU({ maxSize: config.tileCacheSize });\n  }\n  return tileCache;\n}\n\n/**\n * Browser function to decode an image file buffer into valid pixel data\n */\nexport async function bufferToPixelDataBrowser(\n  buff: ArrayBuffer,\n): Promise<PixelData> {\n  const blob = new Blob([buff]);\n  const imageBitmap = await createImageBitmap(blob);\n\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = imageBitmap.width;\n  canvas.height = imageBitmap.height;\n  ctx.drawImage(imageBitmap, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  return {\n    pixels: imageData.data,\n    width: canvas.width,\n    height: canvas.height,\n    components: imageData.data.length / (canvas.width * canvas.height),\n  };\n}\n\nexport function getBufferToPixelDataParser(): BufferToPixelDataFunction {\n  if (config.bufferToPixelData) {\n    return config.bufferToPixelData;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return bufferToPixelDataBrowser;\n  }\n\n  throw new Error(\n    \"An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`\",\n  );\n}\n\nexport function canParsePixelData(): boolean {\n  return !!config.bufferToPixelData || typeof window !== \"undefined\";\n}\n","import { LineString, MultiLineString, Position } from \"geojson\";\n\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\nimport { math } from \"./math\";\nimport {\n  TileJSON,\n  canParsePixelData,\n  getBufferToPixelDataParser,\n  getTileCache,\n} from \"../tiledecoding\";\n\nconst TERRAIN_TILESET = \"terrain-rgb-v2\";\nconst API_BATCH_SIZE = 50;\nconst API_WARN_SIZE = 1000;\n\nlet terrainTileJson: TileJSON = null;\n\nexport type ElevationAtOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Zoom level to use for the terrain tileset in `client` mode.\n   * If not provided, the highest zoom level will be used.\n   */\n  zoom?: number;\n\n  /**\n   * If set to `client`, the elevation will be computed from the terrain tiles on the client side.\n   * If set to `server`, the elevation will be obtained from the MapTiler Elevation API.\n   * Defaults to `server` for `at`, `batch`, and `client` for `fromLineString`, `fromMultiLineString` (in browser envs).\n   */\n  computeOn?: \"client\" | \"server\";\n};\n\n/**\n * Options for batch elevation lookup\n */\nexport type ElevationBatchOptions = ElevationAtOptions & {\n  /**\n   * If provided, a median kernel of the given size will smooth the elevation\n   * to reduce very small local variations\n   */\n  smoothingKernelSize?: number;\n};\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nasync function computeOnServer(\n  positions: Position[],\n  apiKey: string,\n): Promise<Position[]> {\n  if (positions.length > API_WARN_SIZE) {\n    console.warn(\n      \"Computing elevation for complex geometries is discouraged - simplify the geometry before proceeding\",\n    );\n  }\n\n  const parts = Math.ceil(positions.length / API_BATCH_SIZE);\n  const respPromises = Array.from({ length: parts }, () => null).map(\n    (_, part) => {\n      const startPos = part * API_BATCH_SIZE;\n      const batch = positions.slice(startPos, startPos + API_BATCH_SIZE);\n      const batchEncoded = batch.map((pos) => pos.join(\",\")).join(\";\");\n      const endpoint = new URL(\n        `elevation/${batchEncoded}.json`,\n        defaults.maptilerApiURL,\n      );\n      endpoint.searchParams.set(\"key\", apiKey);\n      return callFetch(endpoint.toString());\n    },\n  );\n\n  const resps = await Promise.allSettled(respPromises);\n  const jsons = await Promise.all(\n    resps.map(async (resp) => {\n      if (resp.status === \"rejected\") {\n        throw new Error(\n          `Some segments could not be fetched, error: ${resp.reason}`,\n        );\n      }\n      if (!resp.value.ok) {\n        throw new Error(\n          `Some segments could not be fetched, response: ${\n            resp.value.status\n          } ${await resp.value.text()}, url: ${resp.value.url}`,\n        );\n      }\n      return resp.value.json();\n    }),\n  );\n\n  return jsons.flat();\n}\n\nasync function computeOnClient(\n  positions: Position[],\n  apiKey: string,\n  zoom?: number,\n): Promise<Position[]> {\n  // Fetch terrain TileJSON\n  if (!terrainTileJson) {\n    const endpoint = new URL(\n      `tiles/${TERRAIN_TILESET}/tiles.json`,\n      defaults.maptilerApiURL,\n    );\n    endpoint.searchParams.set(\"key\", apiKey);\n    const urlWithParams = endpoint.toString();\n    const res = await callFetch(urlWithParams);\n    if (res.ok) {\n      terrainTileJson = (await res.json()) as TileJSON;\n    } else {\n      throw new ServiceError(res, customMessages[res.status] ?? \"\");\n    }\n  }\n\n  // Better throw about not bein able to parse tiles before fetching them\n  const tileParser = getBufferToPixelDataParser();\n  const tileURLSchema = terrainTileJson.tiles[0];\n  const cache = getTileCache();\n\n  const maxZoom = terrainTileJson.maxzoom;\n  let usedZoom = ~~(zoom ?? maxZoom);\n  if (usedZoom > maxZoom || usedZoom < 0) {\n    usedZoom = maxZoom;\n  }\n  const tileIndicesFloats = positions.map((position) =>\n    math.wgs84ToTileIndex(position, usedZoom, false),\n  );\n  const tileIndicesInteger = tileIndicesFloats.map((index) => [\n    ~~index[0],\n    ~~index[1],\n  ]);\n  const tileIDs = tileIndicesInteger.map(\n    (index) =>\n      `terrain_${usedZoom.toString()}_${index[0].toString()}_${index[1].toString()}`,\n  );\n\n  // unique tiles to fetch (excluding those already in cache and the doublons)\n  const uniqueTilesToFetch = Array.from(\n    new Set(tileIDs.filter((tileID) => !cache.has(tileID))),\n  ).map((tileID) => tileID.split(\"_\").slice(1));\n  const tileURLs = uniqueTilesToFetch.map((zxy) =>\n    tileURLSchema\n      .replace(\"{x}\", zxy[1].toString())\n      .replace(\"{y}\", zxy[2].toString())\n      .replace(\"{z}\", zxy[0].toString()),\n  );\n  const promisesFetchTiles = tileURLs.map((url) => callFetch(url));\n  const resTiles = await Promise.allSettled(promisesFetchTiles);\n  const fulfilledRes = resTiles\n    .map((el: PromiseSettledResult<Response>) =>\n      el.status === \"fulfilled\" ? el.value : null,\n    )\n    .filter((res) => res);\n  const fulfilledRButNotOkRes = fulfilledRes.filter((res) => !res.ok);\n\n  if (fulfilledRes.length !== promisesFetchTiles.length) {\n    throw new Error(\"Some tiles could not be fetched.\");\n  }\n\n  if (fulfilledRButNotOkRes.length) {\n    throw new ServiceError(\n      fulfilledRButNotOkRes[0],\n      customMessages[fulfilledRButNotOkRes[0].status] ?? \"\",\n    );\n  }\n\n  const tileArrayBuffers = await Promise.all(\n    fulfilledRes.map((res) => res.arrayBuffer()),\n  );\n\n  // It is possible that the tile is missing\n  if (!tileArrayBuffers.every((buff) => buff.byteLength > 0)) {\n    throw new Error(\"Some tiles are not available.\");\n  }\n\n  const tilePixelDatas = await Promise.all(\n    tileArrayBuffers.map((buff) => tileParser(buff)),\n  );\n\n  // Adding to cache\n  tilePixelDatas.forEach((tilePixelData, i) => {\n    const zxy = uniqueTilesToFetch[i];\n    const tileID = `terrain_${zxy[0].toString()}_${zxy[1].toString()}_${zxy[2].toString()}`;\n    cache.set(tileID, tilePixelData);\n  });\n\n  const elevatedPositions = positions.map((position, i) => {\n    const tileID = tileIDs[i];\n    const tileIndexFloat = tileIndicesFloats[i];\n    const tilePixelData = cache.get(tileID);\n\n    // const pixelX = ~~(tilePixelData.width * (tileIndexFloat[0] % 1));\n    // const pixelY = ~~(tilePixelData.height * (tileIndexFloat[1] % 1));\n\n    const pixelX = Math.min(\n      Math.round(tilePixelData.width * (tileIndexFloat[0] % 1)),\n      tilePixelData.width - 1,\n    );\n    const pixelY = Math.min(\n      Math.round(tilePixelData.height * (tileIndexFloat[1] % 1)),\n      tilePixelData.height - 1,\n    );\n\n    const pixelDataIndex =\n      (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n    const R = tilePixelData.pixels[pixelDataIndex];\n    const G = tilePixelData.pixels[pixelDataIndex + 1];\n    const B = tilePixelData.pixels[pixelDataIndex + 2];\n    const elevation = -10000 + (R * 256 * 256 + G * 256 + B) * 0.1;\n\n    return [position[0], position[1], ~~(elevation * 1000) / 1000];\n  });\n\n  return elevatedPositions;\n}\n\n/**\n * Get the elevation at a given position.\n * The returned position is of form [longitude, latitude, altitude]\n */\nasync function at(\n  /**\n   * Wgs84 position as [longitude, latitude]\n   */\n  position: Position,\n  /**\n   * Options\n   */\n  options: ElevationAtOptions = {},\n): Promise<Position> {\n  const elevatedPositions = await batch([position], options);\n  return elevatedPositions[0];\n}\n\n/**\n * Perform a batch elevation request\n */\nasync function batch(\n  /**\n   * Wgs84 positions as [[lng0, lat0], [lng1, lat1], [lng2, lat2], ...]\n   */\n  positions: Position[],\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<Position[]> {\n  if (positions.length === 0) return [];\n\n  const apiKey = options.apiKey ?? config.apiKey;\n\n  const elevatedPositions =\n    options.computeOn === \"client\"\n      ? await computeOnClient(positions, apiKey, options.zoom)\n      : await computeOnServer(positions, apiKey);\n\n  // Smoothing\n  if (options.smoothingKernelSize) {\n    // make sure the kernel is of an odd size\n    const kernelSize = ~~(options.smoothingKernelSize / 2) * 2 + 1;\n    const elevations: number[] = elevatedPositions.map((pos) => pos[2]);\n    const kernelSpan = ~~(kernelSize / 2);\n\n    for (let i = kernelSpan; i < elevations.length - kernelSpan - 1; i += 1) {\n      let sum = 0;\n      for (let j = 0; j < kernelSize; j += 1) {\n        const elev = elevations[i - kernelSpan + j];\n        sum += elev;\n      }\n      sum /= kernelSize;\n      elevatedPositions[i][2] = sum;\n    }\n  }\n\n  return elevatedPositions;\n}\n\n/**\n * Creates a clone of a GeoJSON LineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: LineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<LineString> {\n  if (ls.type !== \"LineString\") {\n    throw new Error(\"The provided object is not a GeoJSON LineString\");\n  }\n\n  options.computeOn ??= canParsePixelData() ? \"client\" : \"server\";\n  const clone = structuredClone(ls) as LineString;\n  const elevatedPositions = await batch(clone.coordinates, options);\n  clone.coordinates = elevatedPositions;\n\n  return clone;\n}\n\n/**\n * Creates a clone of a MultiLineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromMultiLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: MultiLineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<MultiLineString> {\n  if (ls.type !== \"MultiLineString\") {\n    throw new Error(\"The provided object is not a GeoJSON MultiLineString\");\n  }\n\n  options.computeOn ??= canParsePixelData() ? \"client\" : \"server\";\n  const clone = structuredClone(ls) as MultiLineString;\n  const multiLengths = clone.coordinates.map((poss) => poss.length);\n\n  // This is equivalent to a batch of batch, so we makes the multilinestring\n  // a unique line string to reduce number of requests\n  const flattenPositions = clone.coordinates.flat();\n  const flattenPositionsElevated = await batch(flattenPositions, options);\n\n  // And then chopping back into a multi line string\n  const result: Position[][] = [];\n  let index = 0;\n  for (const length of multiLengths) {\n    result.push(flattenPositionsElevated.slice(index, index + length));\n    index += length;\n  }\n\n  clone.coordinates = result;\n  return clone;\n}\n\nexport const elevation = {\n  at,\n  batch,\n  fromLineString,\n  fromMultiLineString,\n};\n"],"names":["customMessages","batch","elevation"],"mappings":"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","x_google_ignoreList":[13]}