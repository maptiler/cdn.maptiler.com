(function(m,D){typeof exports=="object"&&typeof module<"u"?D(exports):typeof define=="function"&&define.amd?define(["exports"],D):(m=typeof globalThis<"u"?globalThis:m||self,D(m.maptilerClient={}))})(this,function(m){"use strict";function D(){return typeof self<"u"?fetch.bind(self):typeof global<"u"&&global.fetch?global.fetch:null}class J{constructor(){this._apiKey="",this._fetch=D(),this.tileCacheSize=200}set apiKey(t){this._apiKey=t}get apiKey(){return this._apiKey}set fetch(t){this._fetch=t}get fetch(){return this._fetch}}const u=new J,E={AUTO:"auto",ALBANIAN:"sq",ARABIC:"ar",ARMENIAN:"hy",AZERBAIJANI:"az",BELORUSSIAN:"be",BOSNIAN:"bs",BRETON:"br",BULGARIAN:"bg",CATALAN:"ca",CHINESE:"zh",CROATIAN:"hr",CZECH:"cs",DANISH:"da",DUTCH:"nl",ENGLISH:"en",ESPERANTO:"eo",ESTONIAN:"et",FINNISH:"fi",FRENCH:"fr",FRISIAN:"fy",GEORGIAN:"ka",GERMAN:"de",GREEK:"el",HEBREW:"he",HUNGARIAN:"hu",ICELANDIC:"is",IRISH:"ga",ITALIAN:"it",JAPANESE:"ja",KANNADA:"kn",KAZAKH:"kk",KOREAN:"ko",ROMAN_LATIN:"la",LATVIAN:"lv",LITHUANIAN:"lt",LUXEMBOURGISH:"lb",MACEDONIAN:"mk",MALTESE:"mt",NORWEGIAN:"no",POLISH:"pl",PORTUGUESE:"pt",ROMANIAN:"ro",ROMANSH:"rm",RUSSIAN:"ru",SCOTTISH_GAELIC:"gd",SERBIAN_CYRILLIC:"sr",SLOVAK:"sk",SLOVENE:"sl",SPANISH:"es",SWEDISH:"sv",THAI:"th",TURKISH:"tr",UKRAINIAN:"uk",WELSH:"cy"},yt=new Set(Object.values(E));function Z(){if(typeof navigator>"u")return Intl.DateTimeFormat().resolvedOptions().locale.split("-")[0];const i=Array.from(new Set(navigator.languages.map(t=>t.split("-")[0]))).filter(t=>yt.has(t));return i.length?i[0]:E.ENGLISH}async function A(i,t={}){if(u.fetch===null)throw new Error("The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch");if(new URL(i).searchParams.get("key").trim()==="")throw new Error("The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com");return u.fetch(i,t)}const d={maptilerApiURL:"https://api.maptiler.com/",mapStyle:"streets-v2"};Object.freeze(d);class v extends Error{constructor(t,e=""){super(`Call to enpoint ${t.url} failed with the status code ${t.status}. ${e}`),this.res=t}}const M={400:"Query too long / Invalid parameters",403:"Key is missing, invalid or restricted"};function Q(i,t){const{language:e}=t;if(e==null)return;const n=Array.from(new Set((Array.isArray(e)?e:[e]).map(a=>a===E.AUTO?Z():a))).join(",");i.set("language",n)}function X(i,t){const{apiKey:e,limit:n,types:a,excludeTypes:r}=t;i.set("key",e??u.apiKey),n!=null&&i.set("limit",String(n)),a!=null&&i.set("types",a.join(",")),r!=null&&i.set("excludeTypes",String(r)),Q(i,t)}function tt(i,t){X(i,t);const{bbox:e,proximity:n,country:a,fuzzyMatch:r,autocomplete:s}=t;e!=null&&i.set("bbox",e.join(",")),n!=null&&i.set("proximity",n==="ip"?n:n.join(",")),a!=null&&i.set("country",a.join(",")),r!=null&&i.set("fuzzyMatch",r?"true":"false"),s!=null&&i.set("autocomplete",s?"true":"false")}async function St(i,t={}){if(typeof i!="string"||i.trim().length===0)throw new Error("The query must be a non-empty string");const e=new URL(`geocoding/${encodeURIComponent(i)}.json`,d.maptilerApiURL),{searchParams:n}=e;tt(n,t);const a=e.toString(),r=await A(a);if(!r.ok)throw new v(r,M[r.status]??"");return await r.json()}async function vt(i,t={}){if(!Array.isArray(i)||i.length<2)throw new Error("The position must be an array of form [lng, lat].");const e=new URL(`geocoding/${i[0]},${i[1]}.json`,d.maptilerApiURL);X(e.searchParams,t);const n=e.toString(),a=await A(n);if(!a.ok)throw new v(a,M[a.status]??"");return await a.json()}async function Tt(i,t={}){const e=new URL(`geocoding/${i}.json`,d.maptilerApiURL);e.searchParams.set("key",t.apiKey??u.apiKey),Q(e.searchParams,t);const n=e.toString(),a=await A(n);if(!a.ok)throw new v(a,M[a.status]??"");return await a.json()}async function At(i,t={}){if(!i.length)return[];const e=i.map(c=>encodeURIComponent(c)).join(";"),n=new URL(`geocoding/${e}.json`,d.maptilerApiURL),{searchParams:a}=n;tt(a,t);const r=n.toString(),s=await A(r);if(!s.ok)throw new v(s,M[s.status]??"");const o=await s.json();return i.length===1?[o]:o}const It={forward:St,reverse:vt,byId:Tt,batch:At,language:E},et={403:"Key is missing, invalid or restricted"};async function wt(i={}){const t=new URL("geolocation/ip.json",d.maptilerApiURL);t.searchParams.set("key",i.apiKey??u.apiKey);const e=t.toString(),n=await A(e);if(!n.ok)throw new v(n,n.status in et?et[n.status]:"");return await n.json()}const Lt={info:wt},N={403:"Key is missing, invalid or restricted"};async function Rt(i,t={}){if(typeof i!="string"||i.trim().length===0)throw new Error("The query must be a non-empty string");const e=new URL(`coordinates/search/${i}.json`,d.maptilerApiURL);e.searchParams.set("key",t.apiKey??u.apiKey),"limit"in t&&e.searchParams.set("limit",t.limit.toString()),"transformations"in t&&e.searchParams.set("transformations",t.transformations.toString()),"exports"in t&&e.searchParams.set("exports",t.exports.toString());const n=e.toString(),a=await A(n);if(!a.ok)throw new v(a,a.status in N?N[a.status]:"");return await a.json()}async function Ut(i,t={}){const e=(Array.isArray(i[0])?i:[i]).map(s=>`${s[0]},${s[1]}`).join(";"),n=new URL(`coordinates/transform/${e}.json`,d.maptilerApiURL);n.searchParams.set("key",t.apiKey??u.apiKey),"sourceCrs"in t&&n.searchParams.set("s_srs",t.sourceCrs.toString()),"targetCrs"in t&&n.searchParams.set("t_srs",t.targetCrs.toString()),"operations"in t&&n.searchParams.set("ops",(Array.isArray(t.operations)?t.operations:[t.operations]).join("|"));const a=n.toString(),r=await A(a);if(!r.ok)throw new v(r,r.status in N?N[r.status]:"");return await r.json()}const Dt={search:Rt,transform:Ut},it={403:"Key is missing, invalid or restricted"};async function Et(i,t={}){if(typeof i!="string"||i.trim().length===0)throw new Error("The data ID must be a non-empty string");const e=new URL(`data/${encodeURIComponent(i)}/features.json`,d.maptilerApiURL);e.searchParams.set("key",t.apiKey??u.apiKey);const n=e.toString(),a=await A(n);if(!a.ok)throw new v(a,a.status in it?it[a.status]:"");return await a.json()}const Pt={get:Et};function nt(i){const t=/^maptiler:\/\/(.*)/;let e;const n=i.trim();let a;return n.startsWith("http://")||n.startsWith("https://")?a=n:(e=t.exec(n))!==null?a=`https://api.maptiler.com/maps/${e[1]}/style.json`:a=`https://api.maptiler.com/maps/${n}/style.json`,a}class x{constructor(t,e,n,a,r,s){this.name=t,this.variantType=e,this.id=n,this.referenceStyle=a,this.description=r,this.imageURL=s}getName(){return this.name}getFullName(){return`${this.referenceStyle.getName()} ${this.name}`}getType(){return this.variantType}getId(){return this.id}getDescription(){return this.description}getReferenceStyle(){return this.referenceStyle}hasVariant(t){return this.referenceStyle.hasVariant(t)}getVariant(t){return this.referenceStyle.getVariant(t)}getVariants(){return this.referenceStyle.getVariants().filter(t=>t!==this)}getImageURL(){return this.imageURL}getExpandedStyleURL(){return nt(this.getId())}}class O{constructor(t,e){this.name=t,this.id=e,this.variants={},this.orderedVariants=[]}getName(){return this.name}getId(){return this.id}addVariant(t){this.variants[t.getType()]=t,this.orderedVariants.push(t)}hasVariant(t){return t in this.variants}getVariant(t){return t in this.variants?this.variants[t]:this.orderedVariants[0]}getVariants(){return Object.values(this.variants)}getDefaultVariant(){return this.orderedVariants[0]}}const b=[{referenceStyleID:"STREETS",name:"Streets",description:"",variants:[{id:"streets-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"streets-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"streets-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""},{id:"streets-v2-night",name:"Night",variantType:"NIGHT",description:"",imageURL:""},{id:"streets-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""}]},{referenceStyleID:"OUTDOOR",name:"Outdoor",description:"",variants:[{id:"outdoor-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"outdoor-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""}]},{referenceStyleID:"WINTER",name:"Winter",description:"",variants:[{id:"winter-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"winter-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""}]},{referenceStyleID:"SATELLITE",name:"Satellite",description:"",variants:[{id:"satellite",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"HYBRID",name:"Hybrid",description:"",variants:[{id:"hybrid",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"BASIC",name:"Basic",description:"",variants:[{id:"basic-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"basic-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"basic-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"BRIGHT",name:"Bright",description:"",variants:[{id:"bright-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"bright-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"bright-v2-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""},{id:"bright-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""}]},{referenceStyleID:"OPENSTREETMAP",name:"OpenStreetMap",description:"",variants:[{id:"openstreetmap",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]},{referenceStyleID:"TOPO",name:"Topo",description:"",variants:[{id:"topo-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"topo-v2-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"topo-v2-shiny",name:"Shiny",variantType:"SHINY",description:"",imageURL:""},{id:"topo-v2-pastel",name:"Pastel",variantType:"PASTEL",description:"",imageURL:""},{id:"topo-v2-topographique",name:"Topographique",variantType:"TOPOGRAPHIQUE",description:"",imageURL:""}]},{referenceStyleID:"VOYAGER",name:"Voyager",description:"",variants:[{id:"voyager-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"voyager-v2-darkmatter",name:"Darkmatter",variantType:"DARK",description:"",imageURL:""},{id:"voyager-v2-positron",name:"Positron",variantType:"LIGHT",description:"",imageURL:""},{id:"voyager-v2-vintage",name:"Vintage",variantType:"VINTAGE",description:"",imageURL:""}]},{referenceStyleID:"TONER",name:"Toner",description:"",variants:[{id:"toner-v2",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"toner-v2-background",name:"Background",variantType:"BACKGROUND",description:"",imageURL:""},{id:"toner-v2-lite",name:"Lite",variantType:"LITE",description:"",imageURL:""},{id:"toner-v2-lines",name:"Lines",variantType:"LINES",description:"",imageURL:""}]},{referenceStyleID:"DATAVIZ",name:"Dataviz",description:"",variants:[{id:"dataviz",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"dataviz-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"dataviz-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"BACKDROP",name:"Backdrop",description:"",variants:[{id:"backdrop",name:"Default",variantType:"DEFAULT",description:"",imageURL:""},{id:"backdrop-dark",name:"Dark",variantType:"DARK",description:"",imageURL:""},{id:"backdrop-light",name:"Light",variantType:"LIGHT",description:"",imageURL:""}]},{referenceStyleID:"OCEAN",name:"Ocean",description:"",variants:[{id:"ocean",name:"Default",variantType:"DEFAULT",description:"",imageURL:""}]}];function $t(i){return new Proxy(i,{get(t,e,n){return t.hasVariant(e)?t.getVariant(e):e.toString().toUpperCase()===e?i.getDefaultVariant():Reflect.get(t,e,n)}})}function kt(){const i={};for(let t=0;t<b.length;t+=1){const e=b[t],n=$t(new O(e.name,e.referenceStyleID));for(let a=0;a<e.variants.length;a+=1){const r=e.variants[a],s=new x(r.name,r.variantType,r.id,n,r.description,r.imageURL);n.addVariant(s)}i[e.referenceStyleID]=n}return i}function C(i){if(!i)return at[b[0].referenceStyleID].getDefaultVariant().getId();if(typeof i=="string"||i instanceof String)return i.trim().toLowerCase();if(i instanceof x)return i.getId();if(i instanceof O)return i.getDefaultVariant().getId()}const at=kt();function Mt(i){const t=[];function e(r){(r.type==="LineString"||r.type==="MultiLineString")&&t.push(r)}function n(r){r.geometry&&e(r.geometry)}function a(r){for(const s of r.features)s.type==="Feature"?n(s):s.type==="FeatureCollection"&&a(s)}return i.type==="Feature"?n(i):i.type==="FeatureCollection"?a(i):e(i),t}function Nt(i,t,e){let n=t[0],a=t[1],r=e[0]-n,s=e[1]-a;if(r!==0||s!==0){const o=((i[0]-n)*r+(i[1]-a)*s)/(r*r+s*s);o>1?(n=e[0],a=e[1]):o>0&&(n+=r*o,a+=s*o)}return r=i[0]-n,s=i[1]-a,r*r+s*s}function j(i,t,e,n,a){let r=n,s;for(let o=t+1;o<e;o++){const c=Nt(i[o],i[t],i[e]);c>r&&(s=o,r=c)}r>n&&(s-t>1&&j(i,t,s,n,a),a.push(i[s]),e-s>1&&j(i,s,e,n,a))}function bt(i,t){const e=i.length-1,n=[i[0]];return j(i,0,e,t,n),n.push(i[e]),n}function Ct(i,t){if(i.length<=2)return i;const e=t!==void 0?t*t:1;return bt(i,e)}const rt={extractLineStrings:Mt,simplify:Ct};function H(i,t=!0){let e=`${i[0]},${i[1]}`;return i.length===3&&t&&(e+=`,${i[2]}`),e}function V(i,t=3e3){let e=i.map(r=>r.join(",")).join("|"),n=5e-6;const a=1e-5;for(;e.length>t;)e=rt.simplify(i,n).map(r=>`${r[0]},${r[1]}`).join("|"),n+=a;return e}function Kt(i,t,e={}){const n=C(e.style),a=e.hiDPI?"@2x":"",r=e.format??"png";let s=~~(e.width??1024),o=~~(e.height??1024);e.hiDPI&&(s=~~(s/2),o=~~(o/2));const c=new URL(`maps/${encodeURIComponent(n)}/static/${i[0]},${i[1]},${t}/${s}x${o}${a}.${r}`,d.maptilerApiURL);if("attribution"in e&&c.searchParams.set("attribution",e.attribution.toString()),"markers"in e){let l="";const p="markerIcon"in e;p&&(l+=`icon:${e.markerIcon}|`),p&&"markerAnchor"in e&&(l+=`anchor:${e.markerAnchor}|`),p&&e.hiDPI&&(l+="scale:2|");const T=Array.isArray(e.markers[0])?e.markers:[e.markers];l+=T.map(g=>H(g,!p)).join("|"),c.searchParams.set("markers",l)}if("path"in e){let l="";if(l+=`fill:${e.pathFillColor??"none"}|`,"pathStrokeColor"in e&&(l+=`stroke:${e.pathStrokeColor}|`),"pathWidth"in e){const p=e.pathWidth/(e.hiDPI?2:1);l+=`width:${p.toString()}|`}l+=V(e.path),c.searchParams.set("path",l)}return c.searchParams.set("key",e.apiKey??u.apiKey),c.toString()}function xt(i,t={}){const e=C(t.style),n=t.hiDPI?"@2x":"",a=t.format??"png";let r=~~(t.width??1024),s=~~(t.height??1024);t.hiDPI&&(r=~~(r/2),s=~~(s/2));const o=new URL(`maps/${encodeURIComponent(e)}/static/${i[0]},${i[1]},${i[2]},${i[3]}/${r}x${s}${n}.${a}`,d.maptilerApiURL);if("attribution"in t&&o.searchParams.set("attribution",t.attribution.toString()),"padding"in t&&o.searchParams.set("padding",t.padding.toString()),"markers"in t){let c="";const l="markerIcon"in t;l&&(c+=`icon:${t.markerIcon}|`),l&&"markerAnchor"in t&&(c+=`anchor:${t.markerAnchor}|`),l&&t.hiDPI&&(c+="scale:2|");const p=Array.isArray(t.markers[0])?t.markers:[t.markers];c+=p.map(T=>H(T,!l)).join("|"),o.searchParams.set("markers",c)}if("path"in t){let c="";if(c+=`fill:${t.pathFillColor??"none"}|`,"pathStrokeColor"in t&&(c+=`stroke:${t.pathStrokeColor}|`),"pathWidth"in t){const l=t.pathWidth/(t.hiDPI?2:1);c+=`width:${l.toString()}|`}c+=V(t.path),o.searchParams.set("path",c)}return o.searchParams.set("key",t.apiKey??u.apiKey),o.toString()}function Ot(i={}){if(!("markers"in i)&&!("path"in i))throw new Error("Automatic static maps require markers and/or path to be created.");const t=C(i.style),e=i.hiDPI?"@2x":"",n=i.format??"png";let a=~~(i.width??1024),r=~~(i.height??1024);i.hiDPI&&(a=~~(a/2),r=~~(r/2));const s=new URL(`maps/${encodeURIComponent(t)}/static/auto/${a}x${r}${e}.${n}`,d.maptilerApiURL);if("attribution"in i&&s.searchParams.set("attribution",i.attribution.toString()),"padding"in i&&s.searchParams.set("padding",i.padding.toString()),"markers"in i){let o="";const c="markerIcon"in i;c&&(o+=`icon:${i.markerIcon}|`),c&&"markerAnchor"in i&&(o+=`anchor:${i.markerAnchor}|`),c&&i.hiDPI&&(o+="scale:2|");const l=Array.isArray(i.markers[0])?i.markers:[i.markers];o+=l.map(p=>H(p,!c)).join("|"),s.searchParams.set("markers",o)}if("path"in i){let o="";if(o+=`fill:${i.pathFillColor??"none"}|`,"pathStrokeColor"in i&&(o+=`stroke:${i.pathStrokeColor}|`),"pathWidth"in i){const c=i.pathWidth/(i.hiDPI?2:1);o+=`width:${c.toString()}|`}o+=V(i.path),s.searchParams.set("path",o)}return s.searchParams.set("key",i.apiKey??u.apiKey),s.toString()}const jt={centered:Kt,bounded:xt,automatic:Ot},K=63710088e-1,st=2*Math.PI*K;function ot(i){return(180+i)/360}function ct(i){return(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+i*Math.PI/360)))/360}function ht(i){const t=pt(i);return[ot(t[0]),ct(t[1])]}function lt(i){return i*360-180}function mt(i){const t=180-i*360;return 360/Math.PI*Math.atan(Math.exp(t*Math.PI/180))-90}function Ht(i){return[lt(i[0]),mt(i[1])]}function z(i,t){const e=Math.PI/180,n=i[1]*e,a=t[1]*e,r=Math.sin(n)*Math.sin(a)+Math.cos(n)*Math.cos(a)*Math.cos((t[0]-i[0])*e);return K*Math.acos(Math.min(r,1))}function Vt(i){const t=Array(i.length);t[0]=0;const e=t.length;for(let n=1;n<e;n++)t[n]=z(i[n-1],i[n])+t[n-1];return t}function pt(i){const t=i[0],e=i[1],n=360,a=((t+180)%n+n)%n-180;return[a===-180?180:a,e]}function ut(i){return st*Math.cos(i*Math.PI/180)}function ft(i,t,e=!0){const n=2**t,a=[i[0]*n,i[1]*n];return e?[~~a[0],~~a[1]]:a}function zt(i,t,e=!0){const n=ht(i);return ft(n,t,e)}function P(i){return i*Math.PI/180}function F(i){return i*180/Math.PI}function Ft(i,t,e){const n=z(i,t),a=P(i[0]),r=P(i[1]),s=P(t[0]),o=P(t[1]),c=n/K,l=Math.sin((1-e)*c)/Math.sin(c),p=Math.sin(e*c)/Math.sin(c),T=l*Math.cos(r)*Math.cos(a)+p*Math.cos(o)*Math.cos(s),g=l*Math.cos(r)*Math.sin(a)+p*Math.cos(o)*Math.sin(s),L=l*Math.sin(r)+p*Math.sin(o),U=Math.atan2(L,Math.sqrt(T*T+g*g)),R=Math.atan2(g,T);return[F(R),F(U)]}const G={EARTH_RADIUS:K,EARTH_CIRCUMFERENCE:st,longitudeToMercatorX:ot,latitudeToMercatorY:ct,wgs84ToMercator:ht,mercatorXToLongitude:lt,mercatorYToLatitude:mt,mercatorToWgs84:Ht,haversineDistanceWgs84:z,wrapWgs84:pt,circumferenceAtLatitude:ut,mercatorToTileIndex:ft,wgs84ToTileIndex:zt,toRadians:P,toDegrees:F,haversineIntermediateWgs84:Ft,haversineCumulatedDistanceWgs84:Vt};class Gt extends Map{#n=0;#t=new Map;#e=new Map;#a;#s;#r;constructor(t={}){if(super(),!(t.maxSize&&t.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");if(typeof t.maxAge=="number"&&t.maxAge===0)throw new TypeError("`maxAge` must be a number greater than 0");this.#a=t.maxSize,this.#s=t.maxAge||Number.POSITIVE_INFINITY,this.#r=t.onEviction}get __oldCache(){return this.#e}#o(t){if(typeof this.#r=="function")for(const[e,n]of t)this.#r(e,n.value)}#i(t,e){return typeof e.expiry=="number"&&e.expiry<=Date.now()?(typeof this.#r=="function"&&this.#r(t,e.value),this.delete(t)):!1}#p(t,e){if(this.#i(t,e)===!1)return e.value}#c(t,e){return e.expiry?this.#p(t,e):e.value}#h(t,e){const n=e.get(t);return this.#c(t,n)}#l(t,e){this.#t.set(t,e),this.#n++,this.#n>=this.#a&&(this.#n=0,this.#o(this.#e),this.#e=this.#t,this.#t=new Map)}#u(t,e){this.#e.delete(t),this.#l(t,e)}*#m(){for(const t of this.#e){const[e,n]=t;this.#t.has(e)||this.#i(e,n)===!1&&(yield t)}for(const t of this.#t){const[e,n]=t;this.#i(e,n)===!1&&(yield t)}}get(t){if(this.#t.has(t)){const e=this.#t.get(t);return this.#c(t,e)}if(this.#e.has(t)){const e=this.#e.get(t);if(this.#i(t,e)===!1)return this.#u(t,e),e.value}}set(t,e,{maxAge:n=this.#s}={}){const a=typeof n=="number"&&n!==Number.POSITIVE_INFINITY?Date.now()+n:void 0;return this.#t.has(t)?this.#t.set(t,{value:e,expiry:a}):this.#l(t,{value:e,expiry:a}),this}has(t){return this.#t.has(t)?!this.#i(t,this.#t.get(t)):this.#e.has(t)?!this.#i(t,this.#e.get(t)):!1}peek(t){if(this.#t.has(t))return this.#h(t,this.#t);if(this.#e.has(t))return this.#h(t,this.#e)}delete(t){const e=this.#t.delete(t);return e&&this.#n--,this.#e.delete(t)||e}clear(){this.#t.clear(),this.#e.clear(),this.#n=0}resize(t){if(!(t&&t>0))throw new TypeError("`maxSize` must be a number greater than 0");const e=[...this.#m()],n=e.length-t;n<0?(this.#t=new Map(e),this.#e=new Map,this.#n=e.length):(n>0&&this.#o(e.slice(0,n)),this.#e=new Map(e.slice(n)),this.#t=new Map,this.#n=0),this.#a=t}*keys(){for(const[t]of this)yield t}*values(){for(const[,t]of this)yield t}*[Symbol.iterator](){for(const t of this.#t){const[e,n]=t;this.#i(e,n)===!1&&(yield[e,n.value])}for(const t of this.#e){const[e,n]=t;this.#t.has(e)||this.#i(e,n)===!1&&(yield[e,n.value])}}*entriesDescending(){let t=[...this.#t];for(let e=t.length-1;e>=0;--e){const n=t[e],[a,r]=n;this.#i(a,r)===!1&&(yield[a,r.value])}t=[...this.#e];for(let e=t.length-1;e>=0;--e){const n=t[e],[a,r]=n;this.#t.has(a)||this.#i(a,r)===!1&&(yield[a,r.value])}}*entriesAscending(){for(const[t,e]of this.#m())yield[t,e.value]}get size(){if(!this.#n)return this.#e.size;let t=0;for(const e of this.#e.keys())this.#t.has(e)||t++;return Math.min(this.#n+t,this.#a)}get maxSize(){return this.#a}entries(){return this.entriesAscending()}forEach(t,e=this){for(const[n,a]of this.entriesAscending())t.call(e,a,n,this)}get[Symbol.toStringTag](){return JSON.stringify([...this.entriesAscending()])}}let B=null;function _(){return B||(B=new Gt({maxSize:u.tileCacheSize})),B}async function dt(i){const t=new Blob([i]),e=await createImageBitmap(t),n=document.createElement("canvas"),a=n.getContext("2d");n.width=e.width,n.height=e.height,a.drawImage(e,0,0);const r=a.getImageData(0,0,n.width,n.height);return{pixels:r.data,width:n.width,height:n.height,components:r.data.length/(n.width*n.height)}}function W(){if(u.bufferToPixelData)return u.bufferToPixelData;if(typeof window<"u")return dt;throw new Error("An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`")}const Bt="tiles/terrain-rgb-v2/tiles.json";let I=null;const Y={403:"Key is missing, invalid or restricted"};async function gt(i){const t=new URL(Bt,d.maptilerApiURL);t.searchParams.set("key",i);const e=t.toString(),n=await A(e);if(n.ok)return I=await n.json(),I;if(!n.ok)throw new v(n,Y[n.status]??"")}async function _t(i,t={}){const e=t.apiKey??u.apiKey;I||await gt(e);const n=I.maxzoom;let a=~~(t.zoom??n);(a>n||a<0)&&(a=n);const r=G.wgs84ToTileIndex(i,a,!1),s=~~r[0],o=~~r[1];if(!I.tiles.length)throw new Error("Terrain tileJSON tile list is empty.");const c=`terrain_${a.toString()}_${s.toString()}_${o.toString()}`;let l;const p=_();if(p.has(c))l=p.get(c);else{const w=I.tiles[0].replace("{x}",s.toString()).replace("{y}",o.toString()).replace("{z}",a.toString()),f=await A(w);if(!f.ok)throw new v(f,Y[f.status]??"");const y=await f.arrayBuffer();l=await W()(y),p.set(c,l)}const T=~~(l.width*(r[0]%1)),g=(~~(l.height*(r[1]%1))*l.width+T)*l.components,L=l.pixels[g],U=l.pixels[g+1],R=l.pixels[g+2],h=-1e4+(L*256*256+U*256+R)*.1;return[i[0],i[1],h]}async function q(i,t={}){const e=t.apiKey??u.apiKey;I||await gt(e);const n=W(),a=I.tiles[0],r=_(),s=I.maxzoom;let o=~~(t.zoom??s);(o>s||o<0)&&(o=s);const c=i.map(h=>G.wgs84ToTileIndex(h,o,!1)),l=c.map(h=>[~~h[0],~~h[1]]).map(h=>`terrain_${o.toString()}_${h[0].toString()}_${h[1].toString()}`),p=Array.from(new Set(l.filter(h=>!r.has(h)))).map(h=>h.split("_").slice(1)),T=p.map(h=>a.replace("{x}",h[1].toString()).replace("{y}",h[2].toString()).replace("{z}",h[0].toString())).map(h=>A(h)),g=(await Promise.allSettled(T)).map(h=>h.status==="fulfilled"?h.value:null).filter(h=>h),L=g.filter(h=>!h.ok);if(g.length!==T.length)throw new Error("Some tiles could not be fetched.");if(L.length)throw new v(L[0],Y[L[0].status]??"");const U=await Promise.all(g.map(h=>h.arrayBuffer()));if(!U.every(h=>h.byteLength>0))throw new Error("Some tiles are not available.");(await Promise.all(U.map(h=>n(h)))).forEach((h,w)=>{const f=p[w],y=`terrain_${f[0].toString()}_${f[1].toString()}_${f[2].toString()}`;r.set(y,h)});const R=i.map((h,w)=>{const f=l[w],y=c[w],S=r.get(f),$=Math.min(Math.round(S.width*(y[0]%1)),S.width-1),k=(Math.min(Math.round(S.height*(y[1]%1)),S.height-1)*S.width+$)*S.components,Jt=S.pixels[k],Zt=S.pixels[k+1],Qt=S.pixels[k+2],Xt=-1e4+(Jt*256*256+Zt*256+Qt)*.1;return[h[0],h[1],~~(Xt*1e3)/1e3]});if(t.smoothingKernelSize){const h=~~(t.smoothingKernelSize/2)*2+1,w=R.map(y=>y[2]),f=~~(h/2);for(let y=f;y<w.length-f-1;y+=1){let S=0;for(let $=0;$<h;$+=1){const k=w[y-f+$];S+=k}S/=h,R[y][2]=S}}return R}async function Wt(i,t={}){if(i.type!=="LineString")throw new Error("The provided object is not a GeoJSON LineString");const e=structuredClone(i),n=await q(e.coordinates,t);return e.coordinates=n,e}async function Yt(i,t={}){if(i.type!=="MultiLineString")throw new Error("The provided object is not a GeoJSON MultiLineString");const e=structuredClone(i),n=e.coordinates.map(c=>c.length),a=e.coordinates.flat(),r=await q(a,t),s=[];let o=0;for(const c of n)s.push(r.slice(o,o+c)),o+=c;return e.coordinates=s,e}const qt={at:_t,batch:q,fromLineString:Wt,fromMultiLineString:Yt};m.ClientConfig=J,m.LanguageGeocoding=E,m.MapStyle=at,m.MapStyleVariant=x,m.ReferenceMapStyle=O,m.ServiceError=v,m.bufferToPixelDataBrowser=dt,m.circumferenceAtLatitude=ut,m.config=u,m.coordinates=Dt,m.data=Pt,m.elevation=qt,m.expandMapStyle=nt,m.geocoding=It,m.geolocation=Lt,m.getAutoLanguageGeocoding=Z,m.getBufferToPixelDataParser=W,m.getTileCache=_,m.mapStylePresetList=b,m.math=G,m.misc=rt,m.staticMaps=jt,m.styleToStyle=C});
